/*************** TABLES ************************/

DECLARE @defname VARCHAR(100), @cmd VARCHAR(1000)

SELECT @defname = sc.name 
FROM sys.columns st INNER JOIN sys.default_constraints sc
ON st.object_id = sc.parent_object_id 
WHERE st.name = 'EnableTwitterIntegration'

SET @cmd = 'ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP CONSTRAINT ' + @defname

EXEC(@cmd)
GO

IF EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('{objectQualifier}Blog_Blogs') and c.name = 'EnableTwitterIntegration')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs
		DROP COLUMN	[EnableTwitterIntegration]
	END
GO

IF EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('{objectQualifier}Blog_Blogs') and c.name = 'TwitterUsername')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs
		DROP COLUMN	[TwitterUsername]
	END
GO

IF EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('{objectQualifier}Blog_Blogs') and c.name = 'TwitterPassword')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs
		DROP COLUMN	[TwitterPassword]
	END
GO

IF EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('{objectQualifier}Blog_Blogs') and c.name = 'TweetTemplate')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs
		DROP COLUMN	[TweetTemplate]
	END
GO

-- various cleanup
UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET TimeZone=0
WHERE TimeZone IS NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET SyndicateIndependant=0
WHERE SyndicateIndependant IS NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Entries
SET AllowComments=0
WHERE AllowComments IS NULL
GO


/*************** PROCEDURES ************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_AddComment') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_AddComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
	@EntryID int,
	@UserID int,
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit,
	@Website nvarchar(255),
	@Email nvarchar(255),
@AddedDate datetime
AS


INSERT INTO {databaseOwner}{objectQualifier}Blog_Comments (
	[EntryID],
	[UserID],
	[Title],
	[Comment],
	[Author],
	[Approved],
	[AddedDate],
	[Website],
	[Email]

) VALUES (
	@EntryID,
	@UserID,
	@Title,
	@Comment,
	@Author,
	@Approved,
	COALESCE(@AddedDate, GetUTCDate()),
	@Website,
	@Email
)

select SCOPE_IDENTITY()

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_UpdateComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
	@CommentID int, 
	@EntryID int, 
	@UserID int, 
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit,
	@Website nvarchar(255),
	@Email nvarchar(255),
@AddedDate datetime
AS

UPDATE {databaseOwner}{objectQualifier}Blog_Comments SET
	[EntryID] = @EntryID,
	[UserID] = @UserID,
	[Title] = @Title,
	[Comment] = @Comment,
	[Author] = @Author,
	[Approved] = @Approved,
	[AddedDate] = COALESCE(@AddedDate, GetUTCDate()),
	[Website] = @Website,
	[Email] = @Email
WHERE
	[CommentID] = @CommentID


GO

/*************** Entry Retrieval SPROCS ************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_GetEntry') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_GetEntry
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntry
@EntryID int,
@PortalId int
AS

SELECT
E.*,
B.[UserID],
B.[SyndicationEmail],
U.[UserName],
U.[DisplayName] AS UserFullName,
(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount
FROM
{databaseOwner}{objectQualifier}Blog_Entries E 
INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.BlogID = E.BlogID 
INNER JOIN {databaseOwner}{objectQualifier}Users U ON U.UserID = B.UserID
WHERE
E.[EntryID] = @EntryID and
B.PortalId = @PortalId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog
@BlogID int
AS

SELECT
E.*,
B.[UserID],
B.[SyndicationEmail],
U.[UserName],
U.[DisplayName] AS UserFullName,
(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount

FROM {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
 {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
 {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
WHERE (B.[BlogID] = @BlogID)
ORDER BY E.AddedDate DESC

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal
@PortalID int,
@ShowNonPublic bit = 0,
@ShowNonPublished bit=0

AS

SELECT
E.*,
B.[UserID],
B.[SyndicationEmail],
U.[UserName],
U.[DisplayName] AS UserFullName,
(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount
FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
 {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
 {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
WHERE B.PortalID = @PortalID 
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
ORDER BY E.AddedDate DESC


GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortal') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListEntriesByPortal
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortal
@PortalID int,
@BlogDate datetime = null,
@ShowNonPublic bit = 0,
@ShowNonPublished bit=0,
@MaxEntries int = 10

AS

If @BlogDate IS NULL SET @BlogDate = GetUTCDate()
SET rowcount @MaxEntries
SELECT
E.*,
B.[UserID],
B.[SyndicationEmail],
U.[UserName],
U.[DisplayName] AS UserFullName,
(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount
FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
 {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
 {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
WHERE B.PortalID = @PortalID AND E.AddedDate <=@BlogDate
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
ORDER BY E.AddedDate DESC

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByDay') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByDay

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByDay
@PortalID int,
@BlogDate datetime = null,
@ShowNonPublic bit = 0,
@ShowNonPublished bit=0,
@MaxEntries int = 10

AS

If @BlogDate IS NULL SET @BlogDate = GetUTCDate()
SET rowcount @MaxEntries
SELECT
E.*,
B.[UserID],
B.[SyndicationEmail],
U.[UserName],
U.[DisplayName] AS UserFullName,
(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount
FROM  {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
 {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
 {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
WHERE 
B.PortalID = @PortalID AND
E.AddedDate BETWEEN @BlogDate AND DateAdd( dd, 1, @BlogDate ) 
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
ORDER BY E.AddedDate DESC

GO

/* SQL Azure Fixes */
/* Add a Primary Key Clustered to Blog_MetaWeblogData */
ALTER TABLE {databaseOwner}{objectQualifier}Blog_MetaWeblogData
	ADD RowID int NOT NULL IDENTITY (1, 1)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Blog_MetaWeblogData] ADD  CONSTRAINT [PK_{objectQualifier}Blog_MetaWeblogData] PRIMARY KEY CLUSTERED 
(
	[RowID] ASC
)
GO