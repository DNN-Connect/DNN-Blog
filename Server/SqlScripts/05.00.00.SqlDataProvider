if not exists (select * from sys.columns where Name = N'ContentItemId' and Object_ID = Object_ID(N'{databaseOwner}{objectQualifier}Blog_Entries'))
	ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entries
		ADD [ContentItemId] int
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Entries
	SET ContentItemId = -1
GO

IF EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'DateFormat' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP COLUMN [DateFormat] 
	END
GO

IF EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'Culture' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP COLUMN [Culture] 
	END
GO

IF EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'TimeZone' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP COLUMN [TimeZone] 
	END
GO

/* Drop module definitions */
DELETE  FROM {databaseOwner}{objectQualifier}ModuleDefinitions
	WHERE   FriendlyName = 'New_Blog'
GO

DELETE  FROM {databaseOwner}{objectQualifier}ModuleDefinitions
	WHERE   FriendlyName = 'Recent_Comments'
GO

DELETE  FROM {databaseOwner}{objectQualifier}ModuleDefinitions
	WHERE   FriendlyName = 'Search_Blog'
GO

DELETE  FROM {databaseOwner}{objectQualifier}ModuleDefinitions
	WHERE   FriendlyName = 'Recent_Entries'
GO

/* This column was being created up to, renamed and changed type and moved down here */
IF EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'EnableGhostWriter' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP COLUMN [EnableGhostWriter] 
	END
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'AuthorMode' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs WITH NOCHECK ADD [AuthorMode] [int] NULL 
	END
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
	SET [AuthorMode] = 0
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}vw_Blog_Terms') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_Terms
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Blog_Terms]
AS
	SELECT  TT.TermID ,
			TT.Name ,
			TT.ParentTermID ,
			TT.Description ,
			CI.CreatedOnDate ,
			TV.Name AS VocabularyName ,
			TV.VocabularyID ,
			CI.TabID ,
			CI.ModuleID ,
			CI.ContentTypeID ,
			CI.ContentItemID ,
			T.PortalID ,
			TT.Weight ,
			TT.TermLeft ,
			TT.TermRight
	FROM    {databaseOwner}{objectQualifier}Taxonomy_Vocabularies AS TV
			INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms AS TT ON TV.VocabularyID = TT.VocabularyID
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags AS CIT ON TT.TermID = CIT.TermID
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON CIT.ContentItemID = CI.ContentItemID
			INNER JOIN {databaseOwner}{objectQualifier}Tabs AS T ON CI.TabID = T.TabID
GO

/* Drop ALL SPROCS */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddCategory') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddCategory
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddEntryCategories') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddEntryCategories
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddEntryTag') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddEntryTag
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteCategory') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteCategory
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteEntryCategories') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteEntryCategories
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteEntryTag') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteEntryTag
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogByUserID') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogByUserID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogByUserName') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogByUserName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogMonths') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogMonths
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogsByUserName') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByUserName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCategory') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCategory
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetSettings') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetSettings
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTag') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTag
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByCategory') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByCategory
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByTag') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByTag
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListBlogs') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListBlogs
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListBlogsByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListBlogsByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListBlogsRootByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListBlogsRootByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListCategories') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListCategories
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListComments') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListComments
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListCommentsByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListCommentsByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListCommentsByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListCommentsByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByDay') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByDay
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByMonth') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortalByMonth
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListEntryCategories') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntryCategories
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListTagsAlpha') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListTagsAlpha
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListTagsByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListTagsByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ListTagsCnt') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ListTagsCnt
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchBlogByKeyWord') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchBlogByKeyWord
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchBlogByPhrase') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchBlogByPhrase
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateCategory') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateCategory
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateSetting') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateSetting
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_DeleteBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_DeleteBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_DeleteComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_DeleteComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_DeleteEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_DeleteEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_GetSettings') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_GetSettings
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_ListBlogs') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_ListBlogs
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_ListComments') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_ListComments
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_ListEntriesByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_ListEntriesByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_UpdateModuleDefId') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_UpdateModuleDefId
GO

/* Add SPROCs */
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddComment') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
	@EntryID int,
	@UserID int,
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit,
	@Website nvarchar(255),
	@Email nvarchar(255),
@AddedDate datetime
AS
INSERT INTO {databaseOwner}{objectQualifier}Blog_Comments (
	[EntryID],
	[UserID],
	[Title],
	[Comment],
	[Author],
	[Approved],
	[AddedDate],
	[Website],
	[Email]
) VALUES (
	@EntryID,
	@UserID,
	@Title,
	@Comment,
	@Author,
	@Approved,
	COALESCE(@AddedDate, GetUTCDate()),
	@Website,
	@Email
)
select SCOPE_IDENTITY()' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlog
	@PortalID INT ,
	@ParentBlogID INT = -1 ,
	@UserID INT ,
	@Title NVARCHAR(512) ,
	@Description NVARCHAR(1024) ,
	@Public BIT ,
	@AllowComments BIT ,
	@AllowAnonymous BIT ,
	@ShowFullName BIT ,
	@Syndicated BIT ,
	@SyndicateIndependant BIT ,
	@SyndicationURL NVARCHAR(1024) ,
	@SyndicationEmail NVARCHAR(255) ,
	@EmailNotification BIT ,
	@AllowTrackbacks BIT ,
	@AutoTrackback BIT ,
	@MustApproveComments BIT ,
	@MustApproveAnonymous BIT ,
	@MustApproveTrackbacks BIT ,
	@UseCaptcha BIT ,
	@AuthorMode INT
AS 
	INSERT  INTO {databaseOwner}{objectQualifier}Blog_Blogs
			( [PortalID] ,
			  [ParentBlogID] ,
			  [UserID] ,
			  [Title] ,
			  [Description] ,
			  [Public] ,
			  [AllowComments] ,
			  [AllowAnonymous] ,
			  [ShowFullName] ,
			  [Created] ,
			  [Syndicated] ,
			  [SyndicateIndependant] ,
			  [SyndicationURL] ,
			  [SyndicationEmail] ,
			  [EmailNotification] ,
			  [AllowTrackbacks] ,
			  [AutoTrackback] ,
			  [MustApproveComments] ,
			  [MustApproveAnonymous] ,
			  [MustApproveTrackbacks] ,
			  [UseCaptcha] ,
			  [AuthorMode]
			)
	VALUES  ( @PortalID ,
			  @ParentBlogID ,
			  @UserID ,
			  @Title ,
			  @Description ,
			  @Public ,
			  @AllowComments ,
			  @AllowAnonymous ,
			  @ShowFullName ,
			  GETUTCDATE() ,
			  @Syndicated ,
			  @SyndicateIndependant ,
			  @SyndicationURL ,
			  @SyndicationEmail ,
			  @EmailNotification ,
			  @AllowTrackbacks ,
			  @AutoTrackback ,
			  @MustApproveComments ,
			  @MustApproveAnonymous ,
			  @MustApproveTrackbacks ,
			  @UseCaptcha ,
			  @AuthorMode
			)
	SELECT  SCOPE_IDENTITY()
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlog
  @BlogID INT,
	@PortalID INT
AS 
	DELETE  FROM {databaseOwner}{objectQualifier}Blog_Blogs
	WHERE   PortalID = @PortalID
			AND ( [BlogID] = @BlogID
				  OR [ParentBlogID] = @BlogID
				)
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlog @BlogID INT
AS 
	SELECT  B.* ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs
			  WHERE     ParentBlogID = B.[BlogID]
			) AS ChildBlogCount ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Entries
			  WHERE     BlogID = B.BlogID
						AND Published = 1
			) AS BlogPostCount
	FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE   [BlogID] = @BlogID
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogsByPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByPortal @PortalID INT
AS 
	SELECT  B.* ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs
			  WHERE     ParentBlogID = B.[BlogID]
			) AS ChildBlogCount ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Entries
			  WHERE     BlogID = B.BlogID
						AND Published = 1
			) AS BlogPostCount
	FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE   [PortalID] = @PortalID
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateBlog
	@PortalID INT ,
	@BlogID INT ,
	@ParentBlogID INT = -1 ,
	@UserID INT ,
	@Title NVARCHAR(512) ,
	@Description NVARCHAR(1024) ,
	@Public BIT ,
	@AllowComments BIT ,
	@AllowAnonymous BIT ,
	@ShowFullName BIT ,
	@Syndicated BIT ,
	@SyndicateIndependant BIT ,
	@SyndicationURL NVARCHAR(1024) ,
	@SyndicationEmail NVARCHAR(255) ,
	@EmailNotification BIT ,
	@AllowTrackbacks BIT ,
	@AutoTrackback BIT ,
	@MustApproveComments BIT ,
	@MustApproveAnonymous BIT ,
	@MustApproveTrackbacks BIT ,
	@UseCaptcha BIT ,
	@AuthorMode INT
AS 
	UPDATE  {databaseOwner}{objectQualifier}Blog_Blogs
	SET     [PortalID] = @PortalID ,
			[ParentBlogID] = @ParentBlogID ,
			[UserID] = @UserID ,
			[Title] = @Title ,
			[Description] = @Description ,
			[Public] = @Public ,
			[AllowComments] = @AllowComments ,
			[AllowAnonymous] = @AllowAnonymous ,
			[ShowFullName] = @ShowFullName ,
			[Syndicated] = @Syndicated ,
			[SyndicateIndependant] = @SyndicateIndependant ,
			[SyndicationURL] = @SyndicationURL ,
			[SyndicationEmail] = @SyndicationEmail ,
			[EmailNotification] = @EmailNotification ,
			[AllowTrackbacks] = @AllowTrackbacks ,
			[AutoTrackback] = @AutoTrackback ,
			[MustApproveComments] = @MustApproveComments ,
			[MustApproveAnonymous] = @MustApproveAnonymous ,
			[MustApproveTrackbacks] = @MustApproveTrackbacks ,
			[UseCaptcha] = @UseCaptcha ,
			[AuthorMode] = @AuthorMode
	WHERE   [BlogID] = @BlogID
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteComment') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteComment
	@CommentID int
AS
DELETE FROM {databaseOwner}{objectQualifier}Blog_Comments
WHERE
	[CommentID] = @CommentID' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteEntry
	@EntryID int
AS
DELETE FROM {databaseOwner}{objectQualifier}Blog_Entries
WHERE
	[EntryID] = @EntryID' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry
	@EntryID int
AS
DELETE FROM
	{databaseOwner}{objectQualifier}Blog_Comments
WHERE
	[EntryID] = @EntryID
	AND [Approved] = 0' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntry
	@EntryID INT ,
	@PortalId INT
AS 
	SELECT  E.* ,
			B.[UserID] ,
			B.[SyndicationEmail] ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(*)
			  FROM      {databaseOwner}{objectQualifier}Blog_Comments
			  WHERE     EntryID = E.EntryID
						AND Approved = 1
			) AS CommentCount ,
			CI.CreatedByUserID ,
			CI.CreatedOnDate ,
			CI.ContentKey ,
			CI.Indexed ,
			CI.Content ,
			CI.ContentItemID ,
			CI.LastModifiedByUserID ,
			CI.LastModifiedOnDate ,
			CI.ModuleID ,
			CI.TabID ,
			CI.ContentTypeID ,
			( SELECT    1
			) AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}Blog_Entries E
			INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.BlogID = E.BlogID
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON U.UserID = B.UserID
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
	WHERE   E.[EntryID] = @EntryID
			AND B.PortalId = @PortalId
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByBlog
	@BlogID INT ,
	@BlogDate DATETIME = NULL ,
	@PageSize INT ,
	@CurrentPage INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	IF @BlogDate IS NULL 
		BEGIN
			SET @BlogDate = GETUTCDATE()
		END
	DECLARE @RowStart INT 
	DECLARE @RowEnd INT 
  
	SET @RowStart = @PageSize * ( @CurrentPage ) + 1
	SET @RowEnd = @RowStart + @PageSize
 
	SELECT  *
	FROM    ( SELECT    E.* ,
						B.[UserID] ,
						B.[SyndicationEmail] ,
						U.[UserName] ,
						U.[DisplayName] AS UserFullName ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Comments
						  WHERE     EntryID = E.EntryID
									AND Approved = 1
						) AS CommentCount ,
						CI.CreatedByUserID ,
						CI.CreatedOnDate ,
						CI.ContentKey ,
						CI.Indexed ,
						CI.Content ,
						CI.LastModifiedByUserID ,
						CI.LastModifiedOnDate ,
						CI.ModuleID ,
						CI.TabID ,
						CI.ContentTypeID ,
						( SELECT    COUNT(BE.ContentItemID)
						  FROM      {databaseOwner}{objectQualifier}Blog_Blogs BB
									INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries BE ON BB.[BlogID] = BE.[BlogID]
									INNER JOIN {databaseOwner}{objectQualifier}Users BU ON BB.[UserID] = BU.[UserID]
									LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems BCI ON BE.ContentItemId = BCI.ContentItemID
						  WHERE     ( BB.[BlogID] = @BlogID
									  OR BB.[ParentBlogID] = @BlogID
									)
									AND BE.AddedDate <= @BlogDate
									AND ( BE.[Published] = 1
										  OR BE.[Published] <> @ShowNonPublished
										)
									AND ( BB.[Public] = 1
										  OR BB.[Public] <> @ShowNonPublic
										)
						) AS TotalRecords ,
						ROW_NUMBER() OVER ( ORDER BY E.AddedDate DESC ) AS RowNumber
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs B
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
						INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
						LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
			  WHERE     ( B.[BlogID] = @BlogID
						  OR B.[ParentBlogID] = @BlogID
						)
						AND E.AddedDate <= @BlogDate
						AND ( E.[Published] = 1
							  OR E.[Published] <> @ShowNonPublished
							)
						AND ( B.[Public] = 1
							  OR B.[Public] <> @ShowNonPublic
							)
			) AS EntryInfo
	WHERE   RowNumber >= @RowStart
			AND RowNumber < @RowEnd
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByDay') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByDay
	@PortalID INT ,
	@BlogDate DATETIME = NULL ,
	@PageSize INT ,
	@CurrentPage INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	IF @BlogDate IS NULL 
		BEGIN
			SET @BlogDate = GETUTCDATE()
		END
		
	DECLARE @RowStart INT 
	DECLARE @RowEnd INT 
				
	SET @RowStart = @PageSize * ( @CurrentPage ) + 1
	SET @RowEnd = @RowStart + @PageSize
	
	SELECT  *
	FROM    ( SELECT    E.* ,
						B.[UserID] ,
						B.[SyndicationEmail] ,
						U.[UserName] ,
						U.[DisplayName] AS UserFullName ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Comments
						  WHERE     EntryID = E.EntryID
									AND Approved = 1
						) AS CommentCount ,
						CI.CreatedByUserID ,
						CI.CreatedOnDate ,
						CI.ContentKey ,
						CI.Indexed ,
						CI.Content ,
						CI.LastModifiedByUserID ,
						CI.LastModifiedOnDate ,
						CI.ModuleID ,
						CI.TabID ,
						CI.ContentTypeID ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Blogs BB
									INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries BE ON BB.BlogID = BE.BlogID
									INNER JOIN {databaseOwner}{objectQualifier}Users BU ON BB.UserID = BU.UserID
						  WHERE     B.PortalID = @PortalID
									AND ( E.[Published] = 1
										  OR E.[Published] <> @ShowNonPublished
										)
									AND ( B.[Public] = 1
										  OR B.[Public] <> @ShowNonPublic
										)
						) AS TotalRecords ,
						ROW_NUMBER() OVER ( ORDER BY E.AddedDate DESC ) AS RowNumber
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs B
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
						INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
						LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
			  WHERE     B.PortalID = @PortalID
						AND E.AddedDate BETWEEN @BlogDate
										AND     DATEADD(dd, 1, @BlogDate)
						AND ( E.[Published] = 1
							  OR E.[Published] <> @ShowNonPublished
							)
						AND ( B.[Public] = 1
							  OR B.[Public] <> @ShowNonPublic
							)
			) AS EntryInfo
	WHERE   RowNumber >= @RowStart
			AND RowNumber <= @RowEnd 
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByMonth') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByMonth
	@PortalID INT ,
	@BlogDate DATETIME = NULL ,
	@PageSize INT ,
	@CurrentPage INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	IF @BlogDate IS NULL 
		BEGIN
			SET @BlogDate = GETUTCDATE()
		END
		
	DECLARE @RowStart INT 
	DECLARE @RowEnd INT 
				
	SET @RowStart = @PageSize * ( @CurrentPage ) + 1
	SET @RowEnd = @RowStart + @PageSize
	
	SELECT  *
	FROM    ( SELECT    E.* ,
						B.[UserID] ,
						B.[SyndicationEmail] ,
						U.[UserName] ,
						U.[DisplayName] AS UserFullName ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Comments
						  WHERE     EntryID = E.EntryID
									AND Approved = 1
						) AS CommentCount ,
						CI.CreatedByUserID ,
						CI.CreatedOnDate ,
						CI.ContentKey ,
						CI.Indexed ,
						CI.Content ,
						CI.LastModifiedByUserID ,
						CI.LastModifiedOnDate ,
						CI.ModuleID ,
						CI.TabID ,
						CI.ContentTypeID ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Blogs BB
									INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries BE ON BB.BlogID = BE.BlogID
									INNER JOIN {databaseOwner}{objectQualifier}Users BU ON BB.UserID = BU.UserID
						  WHERE     B.PortalID = @PortalID
									AND ( E.[Published] = 1
										  OR E.[Published] <> @ShowNonPublished
										)
									AND ( B.[Public] = 1
										  OR B.[Public] <> @ShowNonPublic
										)
						) AS TotalRecords ,
						ROW_NUMBER() OVER ( ORDER BY E.AddedDate DESC ) AS RowNumber
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs B
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
						INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
						LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
			  WHERE     B.PortalID = @PortalID
						AND E.AddedDate BETWEEN DATEADD(month,
														DATEDIFF(month, 0,
															  @BlogDate), 0)
										AND     @BlogDate
						AND E.AddedDate <= GETUTCDATE()
						AND ( E.[Published] = 1
							  OR E.[Published] <> @ShowNonPublished
							)
						AND ( B.[Public] = 1
							  OR B.[Public] <> @ShowNonPublic
							)
			) AS EntryInfo
	WHERE   RowNumber >= @RowStart
			AND RowNumber <= @RowEnd
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByPortal
	@PortalID INT ,
	@BlogDate DATETIME = NULL ,
	@PageSize INT ,
	@CurrentPage INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	IF @BlogDate IS NULL 
		BEGIN
			SET @BlogDate = GETUTCDATE()
		END
	DECLARE @RowStart INT 
	DECLARE @RowEnd INT 
	
	SET @RowStart = @PageSize * ( @CurrentPage ) + 1
	SET @RowEnd = @RowStart + @PageSize
  
	SELECT  *
	FROM    ( SELECT    E.* ,
						B.[UserID] ,
						B.[SyndicationEmail] ,
						U.[UserName] ,
						U.[DisplayName] AS UserFullName ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Comments
						  WHERE     EntryID = E.EntryID
									AND Approved = 1
						) AS CommentCount ,
						CI.CreatedByUserID ,
						CI.CreatedOnDate ,
						CI.ContentKey ,
						CI.Indexed ,
						CI.Content ,
						CI.LastModifiedByUserID ,
						CI.LastModifiedOnDate ,
						CI.ModuleID ,
						CI.TabID ,
						CI.ContentTypeID ,
						( SELECT    COUNT(*)
						  FROM      {databaseOwner}{objectQualifier}Blog_Blogs BB
									INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries BE ON BB.BlogID = BE.BlogID
									INNER JOIN {databaseOwner}{objectQualifier}Users BU ON BB.UserID = BU.UserID
						  WHERE     BB.PortalID = @PortalID
									AND ( @ShowNonPublished = 1
										  OR BE.AddedDate <= @BlogDate
										)
									AND ( BE.[Published] = 1
										  OR BE.[Published] <> @ShowNonPublished
										)
									AND ( BB.[Public] = 1
										  OR BB.[Public] <> @ShowNonPublic
										)
						) AS TotalRecords ,
						ROW_NUMBER() OVER ( ORDER BY E.AddedDate DESC ) AS RowNumber
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs B
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
						INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
						LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
			  WHERE     B.PortalID = @PortalID
						AND ( @ShowNonPublished = 1
							  OR E.AddedDate <= @BlogDate
							)
						AND ( E.[Published] = 1
							  OR E.[Published] <> @ShowNonPublished
							)
						AND ( B.[Public] = 1
							  OR B.[Public] <> @ShowNonPublic
							)
			) AS EntryInfo
	WHERE   RowNumber >= @RowStart
			AND RowNumber < @RowEnd 
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByTerm') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByTerm
	@PortalID INT ,
	@BlogDate DATETIME = NULL ,
	@TagID INT ,
	@PageSize INT ,
	@CurrentPage INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	BEGIN
		IF @BlogDate IS NULL 
			BEGIN
				SET @BlogDate = GETUTCDATE()
			END
		DECLARE @RowStart INT 
		DECLARE @RowEnd INT 
  
		SET @RowStart = @PageSize * ( @CurrentPage ) + 1
		SET @RowEnd = @RowStart + @PageSize
 
		SELECT  *
		FROM    ( SELECT    E.* ,
							B.[UserID] ,
							B.[SyndicationEmail] ,
							U.[UserName] ,
							U.[DisplayName] AS UserFullName ,
							( SELECT    COUNT(*)
							  FROM      {databaseOwner}{objectQualifier}Blog_Comments
							  WHERE     EntryID = E.EntryID
										AND Approved = 1
							) AS CommentCount ,
							CI.CreatedByUserID ,
							CI.CreatedOnDate ,
							CI.ContentKey ,
							CI.Indexed ,
							CI.Content ,
							CI.LastModifiedByUserID ,
							CI.LastModifiedOnDate ,
							CI.ModuleID ,
							CI.TabID ,
							CI.ContentTypeID ,
							( SELECT    COUNT(BE.ContentItemID)
							  FROM      {databaseOwner}{objectQualifier}Blog_Blogs BB
										INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries BE ON BB.BlogID = BE.BlogID
										INNER JOIN {databaseOwner}{objectQualifier}Users BU ON BB.UserID = BU.UserID
										INNER JOIN {databaseOwner}{objectQualifier}ContentItems BCI ON BE.ContentItemId = BCI.ContentItemID
										INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags BCIT ON BE.ContentItemId = BCIT.ContentItemId
										INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms BTT ON BCIT.TermId = BTT.TermId
							  WHERE     BB.PortalID = @PortalID
										AND BTT.TermID = @TagID
										AND ( @ShowNonPublished = 1
											  OR BE.AddedDate <= @BlogDate
											)
										AND ( BE.[Published] = 1
											  OR BE.[Published] <> @ShowNonPublished
											)
										AND ( BB.[Public] = 1
											  OR BB.[Public] <> @ShowNonPublic
											)
							) AS TotalRecords ,
							ROW_NUMBER() OVER ( ORDER BY E.AddedDate DESC ) AS RowNumber
				  FROM      {databaseOwner}{objectQualifier}Blog_Blogs B
							INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.BlogID = E.BlogID
							INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.UserID = U.UserID
							INNER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
							INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags CIT ON E.ContentItemId = CIT.ContentItemId
							INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermId = TT.TermId
				  WHERE     B.PortalID = @PortalID
							AND TT.TermID = @TagID
							AND ( @ShowNonPublished = 1
								  OR E.AddedDate <= @BlogDate
								)
							AND ( E.[Published] = 1
								  OR E.[Published] <> @ShowNonPublished
								)
							AND ( B.[Public] = 1
								  OR B.[Public] <> @ShowNonPublic
								)
				) AS EntryInfo
		WHERE   RowNumber >= @RowStart
				AND RowNumber < @RowEnd 
	END
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth
(
	@PortalID int,
	@BlogID int,
	@BlogDate DateTime
)
AS
DECLARE @BlogMonth int
DECLARE @BlogYear int
SELECT @BlogMonth = 	DATEPART(mm, @BlogDate) 
SELECT @BlogYear = 	DATEPART(yy, @BlogDate) 
If @BlogID > -1
BEGIN
	SELECT
		E.[EntryID],
		E.[BlogID], 
		B.[ParentBlogID],
		E.[Title],
		E.[AddedDate],
		U.[Username],
		DATEPART(mm, E.AddedDate) as AddedMonth,
		DATEPART(yy, E.AddedDate) as AddedYear
	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	
	WHERE B.[PortalID] = @PortalID AND
		 (B.[BlogID] = @BlogID OR  B.[ParentBlogID] = @BlogID) AND 
		DATEPART(yy, E.AddedDate) = @BlogYear AND 
		DATEPART(mm, E.AddedDate) = @BlogMonth
	
	ORDER BY E.AddedDate
END
ELSE
BEGIN
	SELECT
		E.[EntryID],
		E.[BlogID], 
		B.[ParentBlogID],
		E.[Title],
		E.[AddedDate],
		U.[Username],
		DATEPART(mm, E.AddedDate) as AddedMonth,
		DATEPART(yy, E.AddedDate) as AddedYear
	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	
	WHERE B.[PortalID] = @PortalID AND 
		DATEPART(yy, E.AddedDate) = @BlogYear AND 
		DATEPART(mm, E.AddedDate) = @BlogMonth
	
	ORDER BY E.AddedDate
END' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogMonths') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogMonths
(
	@PortalID int,
	@BlogID int
)
AS
If @BlogID > -1
BEGIN
	SELECT
		 DATEPART(mm, E.AddedDate) as AddedMonth,
		 DATEPART(yy, E.AddedDate) as AddedYear,
		 COUNT(EntryId) AS PostCount
	
	FROM {databaseOwner}{objectQualifier}Blog_Entries E INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON
		B.[BlogID] = E.[BlogID]
	
	WHERE B.[PortalID] = @PortalID 
	AND  (B.BlogID = @BlogID OR B.[ParentBlogID] = @BlogID) AND E.Published=1
	
	group by DATEPART(m, E.AddedDate), DATEPART(yy, E.AddedDate)
	order by AddedYear DESC, AddedMonth DESC
END
ELSE
BEGIN
	SELECT
		 DATEPART(mm, E.AddedDate) as AddedMonth,
		 DATEPART(yy, E.AddedDate) as AddedYear,
		 COUNT(EntryId) AS PostCount
	
	FROM {databaseOwner}{objectQualifier}Blog_Entries E INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON
		B.[BlogID] = E.[BlogID]
	
	WHERE B.[PortalID] = @PortalID AND E.Published=1
	
	group by DATEPART(m, E.AddedDate), DATEPART(yy, E.AddedDate)
	order by AddedYear DESC, AddedMonth DESC
END' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID 
	@TabID as Integer
AS
SELECT {databaseOwner}{objectQualifier}TabModules.ModuleID FROM {databaseOwner}{objectQualifier}TabModules INNER JOIN {databaseOwner}{objectQualifier}Modules ON {databaseOwner}{objectQualifier}TabModules.ModuleID = {databaseOwner}{objectQualifier}Modules.ModuleID WHERE {databaseOwner}{objectQualifier}TabModules.TabID=@TabID AND {databaseOwner}{objectQualifier}Modules.ModuleDefID=(SELECT ModuleDefID FROM {databaseOwner}{objectQualifier}ModuleControls WHERE ControlKey = ''View_Entry'')' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetComment') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
	@CommentID int
	
AS
SELECT
	C.[CommentID],
	C.[EntryID],
	C.[UserID],
	C.[Title],
	C.[Comment],
	C.[AddedDate],
	U.[UserName],
	U.[DisplayName] AS UserFullName,
	C.[Author],
	C.[Approved],
	C.[Website],
	C.[Email]
FROM
	{databaseOwner}{objectQualifier}Blog_Comments C
	LEFT JOIN 
	{databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]
WHERE
	C.[CommentID] = @CommentID' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetAllEntriesByBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {objectQualifier}Blog_GetAllEntriesByBlog @BlogID INT
AS 
	SELECT  E.* ,
			B.[UserID] ,
			B.[SyndicationEmail] ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(*)
			  FROM      {databaseOwner}{objectQualifier}Blog_Comments
			  WHERE     EntryID = E.EntryID
						AND Approved = 1
			) AS CommentCount ,
			CI.CreatedByUserID ,
			CI.CreatedOnDate ,
			CI.ContentKey ,
			CI.Indexed ,
			CI.Content ,
			CI.ContentItemID ,
			CI.LastModifiedByUserID ,
			CI.LastModifiedOnDate ,
			CI.ModuleID ,
			CI.TabID ,
			CI.ContentTypeID
	FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
			INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
	WHERE   ( B.[BlogID] = @BlogID )
	ORDER BY E.AddedDate DESC
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetAllEntriesByPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetAllEntriesByPortal
	@PortalID INT ,
	@ShowNonPublic BIT = 0 ,
	@ShowNonPublished BIT = 0
AS 
	SELECT  E.* ,
			B.[UserID] ,
			B.[SyndicationEmail] ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(*)
			  FROM      {databaseOwner}{objectQualifier}Blog_Comments
			  WHERE     EntryID = E.EntryID
						AND Approved = 1
			) AS CommentCount ,
			CI.CreatedByUserID ,
			CI.CreatedOnDate ,
			CI.ContentKey ,
			CI.Indexed ,
			CI.Content ,
			CI.ContentItemID ,
			CI.LastModifiedByUserID ,
			CI.LastModifiedOnDate ,
			CI.ModuleID ,
			CI.TabID ,
			CI.ContentTypeID
	FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
			INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
	WHERE   B.PortalID = @PortalID
			AND ( E.[Published] = 1
				  OR E.[Published] <> @ShowNonPublished
				)
			AND ( B.[Public] = 1
				  OR B.[Public] <> @ShowNonPublic
				)
	ORDER BY E.AddedDate DESC
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByEntry
	@EntryID INT,
	@ShowNonApproved BIT
AS
	SELECT
		C.[CommentID],
		C.[EntryID],
		C.[UserID],
		C.[Title],
		C.[Comment],
		C.[AddedDate],
		U.[UserName],
		U.[DisplayName] AS UserFullName,
		C.[Author],
		C.[Approved],
		C.[Website],
		C.[Email]
	FROM {databaseOwner}{objectQualifier}Blog_Comments C
		LEFT JOIN {databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]
		WHERE [EntryID] = @EntryID AND (C.[Approved]=1 OR C.[Approved] <> @ShowNonApproved)
		ORDER By C.[CommentID]
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByBlog
	@BlogId INT,
	@ShowNonApproved BIT = 0,
	@MaxComments int = 10
AS
SET rowcount @MaxComments
SELECT
	C.[CommentID],
	C.[EntryID],
	C.[UserID],
	C.[Title],
	C.[Comment],
	C.[AddedDate],
	U.[UserName],
	U.[DisplayName] AS UserFullName,
	C.[Author],
	C.[Approved],
	C.[Website],
	C.[Email]
FROM
	{databaseOwner}{objectQualifier}Blog_Comments C
	LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]
	INNER JOIN
	{databaseOwner}{objectQualifier}Blog_Entries E ON C.EntryID = E.EntryID
	WHERE (C.[Approved] = 1 OR C.[Approved] <> @ShowNonApproved) AND
	E.BlogID = @BlogId
ORDER BY
	C.AddedDate desc' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByPortal
	@PortalId INT,
	@ShowNonApproved BIT = 0,
	@MaxComments int = 10
AS
SET rowcount @MaxComments
SELECT
	C.[CommentID],
	C.[EntryID],
	C.[UserID],
	C.[Title],
	C.[Comment],
	C.[AddedDate],
	U.[UserName],
	U.[DisplayName] AS UserFullName,
	C.[Author],
	C.[Approved],
	C.[Website],
	C.[Email]
FROM
	{databaseOwner}{objectQualifier}Blog_Comments C
	LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]
	INNER JOIN
	{databaseOwner}{objectQualifier}Blog_Entries E ON C.EntryID = E.EntryID
	INNER JOIN
	{databaseOwner}{objectQualifier}Blog_Blogs B ON E.BlogID = B.BlogID
	WHERE (C.[Approved] = 1 OR C.[Approved] <> @ShowNonApproved) AND
	B.PortalID = @PortalId
ORDER BY
	C.AddedDate desc' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_GetCategoriesByEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_GetCategoriesByEntry 
	@entryid int
AS
BEGIN
	SET NOCOUNT ON;
	SELECT c.* 
	FROM {databaseOwner}{objectQualifier}Blog_Entry_Categories ec
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Categories c on ec.CatID = c.CatID
	WHERE ec.EntryID = @entryid
	
END' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_GetTagsByEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_GetTagsByEntry 
	@entryid int
AS
BEGIN
	SET NOCOUNT ON;
	SELECT	t.*
	FROM	{databaseOwner}{objectQualifier}Blog_Tags t
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Entry_Tags e ON t.TagID = e.TagID
	WHERE	EntryID = @entryid
END' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE  PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndBlog
	@BlogID int,
	@SearchString nvarchar(255),
	@ShowNonPublic bit,
	@ShowNonPublished bit
AS
DECLARE @separator char(1)
SET @separator = '' ''
set nocount on
-- @SearchString is the array we wish to parse
-- @Separator is the separator charactor such as a comma
declare @separator_position int -- This is used to locate each separator character
declare @search_value nvarchar(255) -- this holds each array value as it is returned
declare @like_text nvarchar (257)
-- Build my Temp Table to hold results
CREATE TABLE #SearchResults (EntryID int)
-- For my loop to work I need an extra separator at the end.  I always look to the
-- left of the separator character for each array value
set @SearchString = @SearchString + @separator
-- Loop through the string searching for separtor characters
WHILE patindex(''%'' + @separator + ''%'' , @SearchString) <> 0 
BEGIN
	-- patindex matches the a pattern against a string
	select @separator_position =  patindex(''%'' + @separator + ''%'' , @SearchString)
	select @search_value = left(@SearchString, @separator_position - 1)
	
	select @like_text = ''%'' + @Search_value + ''%''
	
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Title] like @like_text
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Description] like @like_text
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE  (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Entry] like @like_text
	  
	-- This replaces what we just processed with and empty string
	select @SearchString = stuff(@SearchString, 1, @separator_position, '''')
END
SELECT S.EntryID, Rank = Count(*)
INTO #SearchResultsGrouped
FROM #SearchResults S
GROUP BY S.EntryID
	
SELECT  S.EntryID, 
	E.[BlogID], 
	B.[Title] as BlogTitle,
	E.[Title] As EntryTitle,
	IsNull(E.[Description], SubString(E.[Entry], 1, 2500)) As Summary,
	E.[AddedDate],
	E.[PermaLink],
	B.[UserID],
	U.[Username],
	U.[DisplayName] AS UserFullName,
	E.Published,
	S.Rank
	FROM   	#SearchResultsGrouped S 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON S.EntryID = E.EntryID
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]  
		INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
Order by S.Rank DESC, E.AddedDate DESC, E.PermaLink DESC
set nocount off' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE  PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndPortal
	@PortalID int,
	@SearchString nvarchar(255),
	@ShowNonPublic bit,
	@ShowNonPublished bit
AS
DECLARE @separator char(1)
SET @separator = '' ''
set nocount on
-- @SearchString is the array we wish to parse
-- @Separator is the separator charactor such as a comma
declare @separator_position int -- This is used to locate each separator character
declare @search_value nvarchar(255) -- this holds each array value as it is returned
declare @like_text nvarchar (257)
-- Build my Temp Table to hold results
CREATE TABLE #SearchResults (EntryID int)
-- For my loop to work I need an extra separator at the end.  I always look to the
-- left of the separator character for each array value
set @SearchString = @SearchString + @separator
-- Loop through the string searching for separtor characters
WHILE patindex(''%'' + @separator + ''%'' , @SearchString) <> 0 
BEGIN
	-- patindex matches the a pattern against a string
	select @separator_position =  patindex(''%'' + @separator + ''%'' , @SearchString)
	select @search_value = left(@SearchString, @separator_position - 1)
	
	select @like_text = ''%'' + @Search_value + ''%''
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE B.[PortalID] = @PortalID 
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Title] like @like_text
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE B.[PortalID] = @PortalID 
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Description] like @like_text
	INSERT #SearchResults
	SELECT E.[EntryID]
	FROM {databaseOwner}{objectQualifier}Blog_Entries E 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
	WHERE B.[PortalID] = @PortalID 
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	AND  E.[Entry] like @like_text
	  
	-- This replaces what we just processed with and empty string
	select @SearchString = stuff(@SearchString, 1, @separator_position, '''')
END
SELECT S.EntryID, Rank = Count(*)
INTO #SearchResultsGrouped
FROM #SearchResults S
GROUP BY S.EntryID
	
SELECT  S.EntryID, 
	E.[BlogID], 
	B.[Title] as BlogTitle,
	E.[Title] As EntryTitle,
	IsNull(E.[Description], SubString(E.[Entry], 1, 2500)) As Summary,
	E.[AddedDate],
	E.[PermaLink],
	B.[UserID],
	U.[Username],
	U.[DisplayName] AS UserFullName,
	E.Published,
	S.Rank
	FROM   	#SearchResultsGrouped S 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON S.EntryID = E.EntryID
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]  
		INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
Order by S.Rank DESC, E.AddedDate DESC, E.PermaLink DESC
set nocount off' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseAndBlog') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE  PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseAndBlog
	@BlogID int,
	@SearchString nvarchar(255),
	@ShowNonPublic bit,
	@ShowNonPublished bit
AS
set nocount on
-- Build Temp Table to hold results
CREATE TABLE #SearchResults (EntryID int)
declare @like_text nvarchar(257)
select @like_text = ''%'' + @SearchString + ''%''
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE  (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Title] like @like_text
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE  (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Description] like @like_text
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE  (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Entry] like @like_text
	
SELECT S.EntryID, Rank = Count(*)
INTO #SearchResultsGrouped
FROM #SearchResults S
GROUP BY S.EntryID
	
SELECT  S.EntryID, 
	E.[BlogID], 
	B.[Title] as BlogTitle,
	E.[Title] As EntryTitle,
	IsNull(E.[Description], SubString(E.[Entry], 1, 2500)) As Summary,
	E.[AddedDate],
	E.[PermaLink],
	B.[UserID],
	U.[Username],
	U.[DisplayName] AS UserFullName,
	E.Published,
	S.Rank
	FROM   	#SearchResultsGrouped S 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON S.EntryID = E.EntryID
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]  
		INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
Order by S.Rank DESC, E.AddedDate DESC, E.PermaLink DESC
set nocount off' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseAndPortal') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE  PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseAndPortal
	@PortalID int,
	@SearchString nvarchar(255),
	@ShowNonPublic bit,
	@ShowNonPublished bit
AS
set nocount on
-- Build Temp Table to hold results
CREATE TABLE #SearchResults (EntryID int)
declare @like_text nvarchar(257)
select @like_text = ''%'' + @SearchString + ''%''
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE B.[PortalID] = @PortalID 
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Title] like @like_text
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE B.[PortalID] = @PortalID 
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Description] like @like_text
INSERT #SearchResults
SELECT E.[EntryID]
FROM {databaseOwner}{objectQualifier}Blog_Entries E 
	INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]
WHERE B.[PortalID] = @PortalID 
AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
AND  E.[Entry] like @like_text
	
SELECT S.EntryID, Rank = Count(*)
INTO #SearchResultsGrouped
FROM #SearchResults S
GROUP BY S.EntryID
	
SELECT  S.EntryID, 
	E.[BlogID], 
	B.[Title] as BlogTitle,
	E.[Title] As EntryTitle,
	IsNull(E.[Description], SubString(E.[Entry], 1, 2500)) As Summary,
	E.[AddedDate],
	E.[PermaLink],
	B.[UserID],
	U.[Username],
	U.[DisplayName] AS UserFullName,
	E.Published,
	S.Rank
	FROM   	#SearchResultsGrouped S 
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON S.EntryID = E.EntryID
		INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs B ON B.[BlogID] = E.[BlogID]  
		INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
Order by S.Rank DESC, E.AddedDate DESC, E.PermaLink DESC
set nocount off' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetSettings') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetSettings
	@PortalID INT ,
	@TabID INT
AS 
	SELECT  [Key] ,
			[Value] ,
			PortalID ,
			TabID 
	FROM    {databaseOwner}{objectQualifier}Blog_Settings
	WHERE   PortalID = @PortalID
			AND TabID = @TabID
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByContentItem') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByContentItem
	@ContentItemId INT ,
	@VocabularyId INT
AS 
	SELECT TOP 100
			TermId ,
			Name ,
			ParentTermId ,
			[Description] ,
			[Weight] ,
			( SELECT    CreatedOnDate
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermId = T.TermId
			) AS CreatedOnDate ,
			( SELECT    CreatedByUserId
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermId = T.TermId
			) AS CreatedByUserId ,
			( SELECT    LastModifiedOnDate
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermId = T.TermId
			) AS LastModifiedOnDate ,
			( SELECT    LastModifiedByUserId
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermId = T.TermId
			) AS LastModifiedByUserId ,
			VocabularyId ,
			TermLeft ,
			TermRight ,
			( SELECT    COUNT(TermId)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms
			  WHERE     TermId = VRT.TermId
						AND ContentItemId = @ContentItemId
			) AS TotalTermUsage ,
			( SELECT    COUNT(TermId)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms
			  WHERE     TermId = VRT.TermId
						AND ContentItemId = @ContentItemId
						AND CreatedOnDate > DATEDIFF(day, GETDATE(), -30)
			) AS MonthTermUsage ,
			( SELECT    COUNT(TermId)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms
			  WHERE     TermId = VRT.TermId
						AND ContentItemId = @ContentItemId
						AND CreatedOnDate > DATEDIFF(day, GETDATE(), -7)
			) AS WeekTermUsage ,
			( SELECT    COUNT(TermId)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms
			  WHERE     TermId = VRT.TermId
						AND ContentItemId = @ContentItemId
						AND CreatedOnDate > DATEDIFF(day, GETDATE(), -1)
			) AS DayTermUsage
	FROM    {databaseOwner}{objectQualifier}vw_Blog_Terms AS VRT
	WHERE   ContentItemId = @ContentItemId
			AND VocabularyID = @VocabularyId
	GROUP BY TermId ,
			Name ,
			ParentTermId ,
			[Description] ,
			[Weight] ,
			VocabularyId ,
			TermLeft ,
			TermRight
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByContentType') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByContentType
	@PortalId INT ,
	@ContentTypeId INT ,
	@VocabularyId INT
AS 
	SELECT TOP 1000
			TermID ,
			Name ,
			ParentTermID ,
			[Description] ,
			[Weight] ,
			( SELECT    CreatedOnDate
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermID = T.TermID
			) AS CreatedOnDate ,
			( SELECT    CreatedByUserId
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermID = T.TermID
			) AS CreatedByUserId ,
			( SELECT    LastModifiedOnDate
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermID = T.TermID
			) AS LastModifiedOnDate ,
			( SELECT    LastModifiedByUserId
			  FROM      {databaseOwner}{objectQualifier}Taxonomy_Terms T
			  WHERE     VRT.TermID = T.TermID
			) AS LastModifiedByUserId ,
			VocabularyID ,
			TermLeft ,
			TermRight ,
			( SELECT    COUNT(TermID)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms T
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries P ON T.ContentItemID = P.ContentItemId
			  WHERE     TermID = VRT.TermID
						AND ContentTypeID = @ContentTypeID
						AND T.PortalID = @PortalID
						AND P.Published = 1
			) AS TotalTermUsage ,
			( SELECT    COUNT(TermID)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms T
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries P ON T.ContentItemID = P.ContentItemId
			  WHERE     TermID = VRT.TermID
						AND ContentTypeID = @ContentTypeID
						AND T.PortalID = @PortalID
						AND CreatedOnDate > DATEADD(day, -30, GETDATE())
						AND P.Published = 1
			) AS MonthTermUsage ,
			( SELECT    COUNT(TermID)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms T
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries P ON T.ContentItemID = P.ContentItemId
			  WHERE     TermID = VRT.TermID
						AND ContentTypeID = @ContentTypeID
						AND T.PortalID = @PortalID
						AND CreatedOnDate > DATEADD(day, -7, GETDATE())
						AND P.Published = 1
			) AS WeekTermUsage ,
			( SELECT    COUNT(TermID)
			  FROM      {databaseOwner}{objectQualifier}vw_Blog_Terms T
						INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries P ON T.ContentItemID = P.ContentItemId
			  WHERE     TermID = VRT.TermID
						AND ContentTypeID = @ContentTypeID
						AND T.PortalID = @PortalID
						AND CreatedOnDate > DATEADD(day, -1, GETDATE())
						AND P.Published = 1
			) AS DayTermUsage
	FROM    {databaseOwner}{objectQualifier}vw_Blog_Terms VRT
	WHERE   VRT.PortalID = @PortalID
			AND VocabularyID = @VocabularyId
			AND ContentTypeID = @ContentTypeID
	GROUP BY TermID ,
			Name ,
			ParentTermID ,
			[Description] ,
			[Weight] ,
			VocabularyID ,
			TermLeft ,
			TermRight
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
	@CommentID int, 
	@EntryID int, 
	@UserID int, 
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit,
	@Website nvarchar(255),
	@Email nvarchar(255),
@AddedDate datetime
AS
UPDATE {databaseOwner}{objectQualifier}Blog_Comments SET
	[EntryID] = @EntryID,
	[UserID] = @UserID,
	[Title] = @Title,
	[Comment] = @Comment,
	[Author] = @Author,
	[Approved] = @Approved,
	[AddedDate] = COALESCE(@AddedDate, GetUTCDate()),
	[Website] = @Website,
	[Email] = @Email
WHERE
	[CommentID] = @CommentID' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateEntry
	@BlogID INT ,
	@EntryID INT ,
	@Title NVARCHAR(255) ,
	@Description NTEXT ,
	@Entry NTEXT ,
	@Published BIT ,
	@AllowComments BIT ,
	@AddedDate DATETIME ,
	@DisplayCopyright BIT ,
	@Copyright NVARCHAR(256) ,
	@PermaLink NVARCHAR(1024) ,
	@ContentItemId INT
AS 
	UPDATE  {databaseOwner}{objectQualifier}Blog_Entries
	SET     [BlogID] = @BlogID ,
			[Title] = @Title ,
			[Description] = @Description ,
			[Entry] = @Entry ,
			[Published] = @Published ,
			[AllowComments] = @AllowComments ,
			[AddedDate] = @AddedDate ,
			[DisplayCopyright] = @DisplayCopyright ,
			[Copyright] = @Copyright ,
			[PermaLink] = @PermaLink ,
			[ContentItemId] = @ContentItemId
	WHERE   [EntryID] = @EntryID
	IF @Published = 1 
		UPDATE  {databaseOwner}{objectQualifier}Blog_Blogs
		SET     [LastEntry] = GETUTCDATE()
		WHERE   [BlogID] = @BlogID
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateSetting') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateSetting
	@PortalID int,
	@TabID int,
	@Key nvarchar(50),
	@Value nvarchar(1024)
AS
set nocount on
If EXISTS (SELECT [Key] FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND TabID=@TabID AND [Key]=@Key)
	UPDATE {databaseOwner}{objectQualifier}Blog_Settings SET
		[Value] = @Value
	WHERE PortalID=@PortalID AND TabID=@TabID AND [Key]=@Key
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}Blog_Settings (PortalID, TabID,[Key], [Value])
	VALUES (@PortalID, @TabID,@Key, @Value)' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_CategoriesGet') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_CategoriesGet
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Blog_Categories
		ORDER BY PortalID ASC ,
				ParentID ASC ,
				Category ASC
	END
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_RetrieveTaxonomyEntries') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_RetrieveTaxonomyEntries
AS 
	BEGIN
		SELECT  E.* ,
				B.[UserID] ,
				B.[SyndicationEmail] ,
				U.[UserName] ,
				U.[DisplayName] AS UserFullName ,
				( SELECT    1
				) AS CommentCount,
				CI.CreatedByUserID ,
				CI.CreatedOnDate ,
				CI.ContentKey ,
				CI.Indexed ,
				CI.Content ,
				CI.LastModifiedByUserID ,
				CI.LastModifiedOnDate ,
				CI.ModuleID ,
				CI.TabID ,
				CI.ContentTypeID ,
				( SELECT    1
				) AS TotalRecords
		FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
				INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID]
				INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
		WHERE   EntryID IN ( SELECT EntryID
							 FROM   {databaseOwner}{objectQualifier}Blog_Entry_Categories C
							 WHERE  C.EntryID = EntryID )
				OR EntryID IN ( SELECT  EntryID
								FROM    {databaseOwner}{objectQualifier}Blog_Entry_Tags T
								WHERE   T.EntryID = EntryID )
	END
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_TagsGet') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_TagsGet
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Blog_Tags
		ORDER BY PortalID ASC ,
				Tag ASC
	END
' 
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName
	@ModuleDefinition nvarchar(50)
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON
	SELECT DM.FriendlyName 
	FROM {databaseOwner}{objectQualifier}ModuleDefinitions MD
		JOIN {databaseOwner}{objectQualifier}DesktopModules DM ON MD.DesktopModuleID = DM.DesktopModuleID
	WHERE MD.FriendlyName = @ModuleDefinition
		
END' 
END
GO

/* May 12th Post Beta 2 Updates */
IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'CreatedUserId' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entries'))
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entries WITH NOCHECK ADD [CreatedUserId] [int] NULL 
	END
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'ViewCount' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entries'))
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entries WITH NOCHECK ADD [ViewCount] [int] NULL 
	END
GO

UPDATE  {databaseOwner}{objectQualifier}Blog_Entries
SET     ViewCount = 0
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddEntry') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddEntry
	@BlogID int,
	@Title nvarchar(255),
	@Description ntext,
	@Entry ntext,
	@Published bit,
	@AllowComments bit,
	@AddedDate datetime,
	@DisplayCopyright bit,
	@Copyright nvarchar(256),
	@PermaLink nvarchar(1024),
	@CreatedUserId INT
AS
DECLARE @EntryID int
UPDATE  {databaseOwner}{objectQualifier}Blog_Blogs
	SET LastEntry = GetUTCDate()
WHERE [BlogID] = @BlogID
INSERT INTO {databaseOwner}{objectQualifier}Blog_Entries (
	[BlogID],
	[Title],
	[Description],
	[Entry],
	[AddedDate],
	[Published],
	[AllowComments],
	[DisplayCopyright],
	[Copyright],
	[PermaLink],
	[CreatedUserId],
	[ViewCount]
) VALUES (
	@BlogID,
	@Title,
	@Description,
	@Entry,
	@AddedDate,
	@Published,
	@AllowComments,
	@DisplayCopyright,
	@Copyright,
	null,
	@CreatedUserId,
	0
)
SET @EntryID = SCOPE_IDENTITY()
If NOT @PermaLink IS NULL
	UPDATE {databaseOwner}{objectQualifier}Blog_Entries SET PermaLink=@PermaLink + convert(nvarchar(10),EntryID) WHERE BlogID=@BlogID AND PermaLink IS NULL
SELECT @EntryID' 
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blog_UpdateEntryViewCount] @EntryID INT
AS 
	UPDATE  {databaseOwner}{objectQualifier}Blog_Entries
	SET     ViewCount = ViewCount + 1
	WHERE   EntryID = @EntryID
GO


ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Categories
	DROP CONSTRAINT FK_{objectQualifier}Blog_Entry_Categories_Categories
GO
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Categories
	DROP CONSTRAINT {objectQualifier}PK_Blog_Categories
GO
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Categories ADD CONSTRAINT
	PK_{objectQualifier}Blog_Categories PRIMARY KEY CLUSTERED 
	(
	CatID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Categories WITH NOCHECK ADD CONSTRAINT
	FK_{objectQualifier}Blog_Entry_Categories_Categories FOREIGN KEY
	(
	CatID
	) REFERENCES {databaseOwner}{objectQualifier}Blog_Categories
	(
	CatID
	) ON UPDATE  NO ACTION 
	 ON DELETE  CASCADE 
GO

/* August 21 */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_BlogsGetAll') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_BlogsGetAll
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blog_Upgrade_BlogsGetAll]
AS 
	SELECT  B.* ,
			U.[UserName] ,
			U.[DisplayName] AS UserFullName ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Blogs
			  WHERE     ParentBlogID = B.[BlogID]
			) AS ChildBlogCount ,
			( SELECT    COUNT(BlogID)
			  FROM      {databaseOwner}{objectQualifier}Blog_Entries
			  WHERE     BlogID = B.BlogID
						AND Published = 1
			) AS BlogPostCount
	FROM    {databaseOwner}{objectQualifier}Blog_Blogs B
			INNER JOIN {databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
GO
