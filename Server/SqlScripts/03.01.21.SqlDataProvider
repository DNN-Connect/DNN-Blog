
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_UpdateSetting') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_UpdateSetting
GO

-- Insert the new setting for DNNSearch and set it to true for the default module
insert INTO {databaseOwner}{objectQualifier}Blog_Settings 
(PortalID, [Key], Value)
select PortalID, 'EnableDNNSearch', 'True'
from {databaseOwner}{objectQualifier}Blog_Blogs Group by PortalID


ALTER TABLE {databaseOwner}{objectQualifier}Blog_Settings ADD
	TabID int NULL 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateSetting
	
	@PortalID int,
	@TabID int,
	@Key nvarchar(50),
	@Value nvarchar(1024)

AS

set nocount on

If EXISTS (SELECT [Key] FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND TabID=@TabID AND [Key]=@Key)
	UPDATE {databaseOwner}{objectQualifier}Blog_Settings SET
		[Value] = @Value
	WHERE PortalID=@PortalID AND TabID=@TabID AND [Key]=@Key
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}Blog_Settings (PortalID, TabID,[Key], [Value])
	VALUES (@PortalID, @TabID,@Key, @Value)

GO



-- Update the table blog_settings with the TabId of the tab where the blog module is placed on
update {databaseOwner}{objectQualifier}Blog_Settings 
set TabID = {databaseOwner}{objectQualifier}Tabs.TabID 
from {databaseOwner}{objectQualifier}DesktopModules 
join {databaseOwner}{objectQualifier}ModuleDefinitions ON {databaseOwner}{objectQualifier}ModuleDefinitions.DesktopModuleID = {databaseOwner}{objectQualifier}DesktopModules.DesktopModuleID 
join {databaseOwner}{objectQualifier}Modules ON {databaseOwner}{objectQualifier}Modules.ModuleDefID = {databaseOwner}{objectQualifier}ModuleDefinitions.ModuleDefID 
join {databaseOwner}{objectQualifier}TabModules ON {databaseOwner}{objectQualifier}TabModules.ModuleID = {databaseOwner}{objectQualifier}Modules.ModuleID 
join {databaseOwner}{objectQualifier}Tabs  ON {databaseOwner}{objectQualifier}Tabs.TabID = {databaseOwner}{objectQualifier}TabModules.TabID 
join {databaseOwner}{objectQualifier}Blog_Settings on {databaseOwner}{objectQualifier}Blog_Settings.PortalID = {databaseOwner}{objectQualifier}Tabs.PortalID 
where {databaseOwner}{objectQualifier}DesktopModules.ModuleName = 'Blog' AND {databaseOwner}{objectQualifier}Modules.IsDeleted = 0 
AND {databaseOwner}{objectQualifier}Blog_Settings.PortalID = {databaseOwner}{objectQualifier}Tabs.PortalID 


-- Dropping the primary key of table Blog_Settings
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Settings DROP CONSTRAINT [PK_{objectQualifier}Blog_Settings]
GO
-- Changing the column's definition
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Settings ALTER COLUMN [TabID] int NOT NULL
GO
-- Creating the new primary key
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Settings ADD CONSTRAINT [PK_{objectQualifier}Blog_Settings] PRIMARY KEY ([PortalID], [TabID], [Key]) ON [PRIMARY]
GO

-- alter the table Blog_Blogs, add new fields
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ADD
	AllowTrackbacks bit NULL,
	AutoTrackback bit NULL,
	MustApproveComments bit NULL,
	MustApproveAnonymous bit NULL,
	MustApproveTrackbacks bit NULL	
GO

-- end modify table Blog_Blogs

-- modify table comments - add new fields
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments ADD
	Approved bit NULL,
	Author nvarchar (50)
GO


-- update the new field(s)
UPDATE {databaseOwner}{objectQualifier}Blog_Comments
	set Approved = 1
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_AddComment') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_AddComment
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
	@EntryID int,
	@UserID int,
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit
AS

INSERT INTO {databaseOwner}{objectQualifier}Blog_Comments (
	[EntryID],
	[UserID],
	[Title],
	[Comment],
	[Author],
	[Approved],
	[AddedDate]
) VALUES (
	@EntryID,
	@UserID,
	@Title,
	@Comment,
	@Author,
	@Approved,
	GetUTCDate()
)

select SCOPE_IDENTITY()

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_UpdateComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
	@CommentID int, 
	@EntryID int, 
	@UserID int, 
	@Title nvarchar(255),
	@Comment ntext,
	@Author nvarchar(50),
	@Approved bit
AS

UPDATE {databaseOwner}{objectQualifier}Blog_Comments SET
	[EntryID] = @EntryID,
	[UserID] = @UserID,
	[Title] = @Title,
	[Comment] = @Comment,
	[Author] = @Author,
	[Approved] = @Approved,
	[AddedDate] = GetUTCDate()
WHERE
	[CommentID] = @CommentID

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_GetComment') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_GetComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
	@CommentID int
	
AS

SELECT
	C.[CommentID],
	C.[EntryID],
	C.[UserID],
	C.[Title],
	C.[Comment],
	C.[AddedDate],
	U.[UserName],
	U.[DisplayName] AS UserFullName,
	C.[Author],
	C.[Approved]

FROM
	{databaseOwner}{objectQualifier}Blog_Comments C
	LEFT JOIN 
	{databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]

WHERE
	C.[CommentID] = @CommentID

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListComments') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListComments
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListComments
@EntryID as Int,
@ShowNonApproved bit=0
AS

SELECT
	C.[CommentID],
	C.[EntryID],
	C.[UserID],
	C.[Title],
	C.[Comment],
	C.[AddedDate],
	U.[UserName],
	U.[DisplayName] AS UserFullName,
	C.[Author],
	C.[Approved]

FROM
	{databaseOwner}{objectQualifier}Blog_Comments C
	LEFT JOIN 
	{databaseOwner}{objectQualifier}Users U ON C.[UserID] = U.[UserID]
	WHERE [EntryID] = @EntryID AND (C.[Approved]=1 OR C.[Approved] <> @ShowNonApproved)

GO

-- end modify table comments

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByBlog') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListEntriesByBlog
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByBlog
	@BlogID int,
	@BlogDate datetime = null,
	@ShowNonPublic bit = 0,
	@ShowNonPublished bit=0,
	@MaxEntries int =10

AS

If @BlogDate IS NULL SET @BlogDate = GetUTCDate()

	SET rowcount @MaxEntries
	SELECT
		U.[UserID],
		U.[Username],
		U.[DisplayName] AS UserFullName,
		E.[EntryID],
		E.[BlogID], 
		E.[Title],
		E.[Description],
		E.[Entry],
		E.[AddedDate],
		E.[Published],
		E.[Copyright],
		E.[PermaLink],
		IsNull(E.[AllowComments],B.[AllowComments]) As AllowComments,
		(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND (Approved = 1 OR Approved <> @ShowNonPublic)) As CommentCount,

		B.[PortalID] As BlogPortalID,
		B.[ParentBlogID],
		B.[Title] As BlogTitle,
		B.[Description] As BlogDescription,
		B.[Public] As BlogPublic,
		B.[AllowComments] As BlogAllowComments,
		B.[AllowAnonymous] As BlogAllowAnonymous,
		B.[LastEntry] As BlogLastEntry,
		B.[Created] As BlogCreated,
		B.[Culture] As BlogCulture,
		B.[ShowFullname] As BlogShowFullName,
		B.[DateFormat] As BlogDateFormat,
		B.[TimeZone] As BlogTimeZone,
		B.[Syndicated] As BlogSyndicated,
		B.[SyndicateIndependant] As BlogSyndicateIndependant


	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE (B.[BlogID] = @BlogID OR B.[ParentBlogID] = @BlogID)
	AND E.AddedDate <=@BlogDate
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	ORDER BY E.AddedDate DESC

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListEntriesByPortal') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListEntriesByPortal
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListEntriesByPortal
@PortalID int,
@BlogDate datetime = null,
@ShowNonPublic bit = 0,
@ShowNonPublished bit=0,
@MaxEntries int = 10

AS

If @BlogDate IS NULL SET @BlogDate = GetUTCDate()
SET rowcount @MaxEntries
	SELECT
		U.[UserID],
		U.[Username],
		U.[DisplayName] AS UserFullName,
		E.[EntryID],
		E.[BlogID], 
		E.[Title],
		E.[Description],
		E.[Entry],
		E.[AddedDate],
		E.[Published],
		E.[Copyright],
		E.[PermaLink],
		IsNull(E.[AllowComments],B.[AllowComments]) As AllowComments,
		B.[ParentBlogID],
		B.[AllowAnonymous],
		B.[Syndicated] AS BlogSyndicated,
		B.[Public] AS BlogPublic,
		(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND (Approved = 1 OR Approved <> @ShowNonPublic)) As CommentCount
	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE B.PortalID = @PortalID AND E.AddedDate <=@BlogDate
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	ORDER BY E.AddedDate DESC

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByBlog
	@BlogID int
AS

	SELECT
		U.[UserID],
		U.[Username],
		U.[DisplayName] AS UserFullName,
		E.[EntryID],
		E.[BlogID], 
		E.[Title],
		E.[Description],
		E.[Entry],
		E.[AddedDate],
		E.[Published],
		E.[Copyright],
		E.[PermaLink],
		IsNull(E.[AllowComments],B.[AllowComments]) As AllowComments,
		(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1 ) As CommentCount,

		B.[PortalID] As BlogPortalID,
		B.[ParentBlogID],
		B.[Title] As BlogTitle,
		B.[Description] As BlogDescription,
		B.[Public] As BlogPublic,
		B.[AllowComments] As BlogAllowComments,
		B.[AllowAnonymous] As BlogAllowAnonymous,
		B.[LastEntry] As BlogLastEntry,
		B.[Created] As BlogCreated,
		B.[Culture] As BlogCulture,
		B.[ShowFullname] As BlogShowFullName,
		B.[DateFormat] As BlogDateFormat,
		B.[TimeZone] As BlogTimeZone,
		B.[Syndicated] As BlogSyndicated,
		B.[SyndicateIndependant] As BlogSyndicateIndependant


	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE (B.[BlogID] = @BlogID)
	ORDER BY E.AddedDate DESC

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ListAllEntriesByPortal
@PortalID int,
@ShowNonPublic bit = 0,
@ShowNonPublished bit=0

AS

	SELECT
		U.[UserID],
		U.[Username],
		U.[DisplayName] AS UserFullName,
		E.[EntryID],
		E.[BlogID], 
		E.[Title],
		E.[Description],
		E.[Entry],
		E.[AddedDate],
		E.[Published],
		E.[Copyright],
		E.[PermaLink],
		IsNull(E.[AllowComments],B.[AllowComments]) As AllowComments,
		B.[ParentBlogID],
		B.[AllowAnonymous],
		B.[Syndicated] AS BlogSyndicated,
		B.[Public] AS BlogPublic,
		(Select Count(*) FROM {databaseOwner}{objectQualifier}Blog_Comments WHERE EntryID = E.EntryID AND Approved = 1) As CommentCount
	FROM   {databaseOwner}{objectQualifier}Blog_Blogs B INNER JOIN
		{databaseOwner}{objectQualifier}Blog_Entries E ON B.[BlogID] = E.[BlogID] INNER JOIN
		{databaseOwner}{objectQualifier}Users U ON B.[UserID] = U.[UserID]
	WHERE B.PortalID = @PortalID 
	AND (E.[Published] = 1 OR E.[Published] <> @ShowNonPublished)
	AND (B.[Public] = 1 OR B.[Public] <> @ShowNonPublic)
	ORDER BY E.AddedDate DESC


GO

-- Update the table Blog_Blogs set the new field AllowTrackbacks default to 1 (true)
update {databaseOwner}{objectQualifier}Blog_Blogs 
set AllowTrackbacks = 1 
GO
