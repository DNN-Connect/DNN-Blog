/******* SPROCS *******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_BlogsGetAll') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_BlogsGetAll
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DelUnAppCommByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetAllEntriesByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetAllEntriesByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetAllEntriesByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetAllEntriesByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogDaysForMonth
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogMonths') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogMonths
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogsByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogViewEntryModuleID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByDay') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByDay
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByMonth') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByMonth
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntriesByTerm') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntriesByTerm
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetSettings') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetSettings
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByContentItem') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByContentItem
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByContentType') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByContentType
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_MetaWeblog_Get_DesktopModule_FriendlyName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByKeyWordAndPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseAndBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseAndBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchByPhraseAndPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchByPhraseAndPortal
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateBlog
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateEntryViewCount') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateEntryViewCount
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateSetting') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateSetting
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_CategoriesGet') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_CategoriesGet
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_GetCategoriesByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_GetCategoriesByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_GetTagsByEntry') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_GetTagsByEntry
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_RetrieveTaxonomyEntries') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_RetrieveTaxonomyEntries
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Upgrade_TagsGet') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_Upgrade_TagsGet
GO

/******* VIEWS *******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Blog_Terms'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_Terms
GO

/******* STRUCTURE *******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Blogs_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP CONSTRAINT FK_{objectQualifier}Blog_Blogs_Portals
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Blogs_Users') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP CONSTRAINT FK_{objectQualifier}Blog_Blogs_Users
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Categories_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Categories'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Categories DROP CONSTRAINT FK_{objectQualifier}Blog_Categories_Portals
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Comments') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments DROP CONSTRAINT FK_{objectQualifier}Blog_Comments
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entry_Categories_Categories') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entry_Categories'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Categories DROP CONSTRAINT FK_{objectQualifier}Blog_Entry_Categories_Categories
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entry_Categories_Entries') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entry_Categories'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Categories DROP CONSTRAINT FK_{objectQualifier}Blog_Entry_Categories_Entries
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entry_Tags_Entries') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entry_Tags'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Tags DROP CONSTRAINT FK_{objectQualifier}Blog_Entry_Tags_Entries
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entry_Tags_Tags') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Entry_Tags'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Entry_Tags DROP CONSTRAINT FK_{objectQualifier}Blog_Entry_Tags_Tags
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Settings_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Settings'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Settings DROP CONSTRAINT FK_{objectQualifier}Blog_Settings_Portals
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Tags_Portals') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Tags'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Tags DROP CONSTRAINT FK_{objectQualifier}Blog_Tags_Portals
GO

/******* REMOVE ALL TABLE CONSTRAINTS *******/
declare @str varchar(max)
declare cur cursor for
SELECT 'ALTER TABLE {databaseOwner}'+t.name+' DROP CONSTRAINT '+c.name
FROM sys.objects c
 INNER JOIN sys.objects t ON t.object_id=c.parent_object_id
WHERE
 t.name LIKE '{objectQualifier}Blog_%'
 AND c.type IN ('C', 'F', 'PK', 'UQ', 'D')
 AND t.type='U'
ORDER BY c.type

open cur
FETCH NEXT FROM cur INTO @str
WHILE (@@fetch_status = 0) BEGIN
  EXEC (@str)
  FETCH NEXT FROM cur INTO @str
END

close cur
deallocate cur 
GO

/******* REMOVE ALL TABLE INDEXES *******/
declare @str varchar(max)
declare cur cursor for
SELECT 'DROP INDEX {databaseOwner}'+t.name+'.'+i.name
FROM sys.indexes i
 INNER JOIN sys.objects t ON t.object_id=i.object_id
WHERE
 t.name LIKE '{objectQualifier}Blog_%'
 AND NOT i.name IS NULL

open cur
FETCH NEXT FROM cur INTO @str
WHILE (@@fetch_status = 0) BEGIN
  EXEC (@str)
  FETCH NEXT FROM cur INTO @str
END

close cur
deallocate cur 
GO

/******* BLOGS TABLE *******/
EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Blogs.[UserID]', 'OwnerUserId', 'COLUMN';
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Blogs.[Public]', 'Published', 'COLUMN';
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Blogs.[Created]', 'CreatedOnDate', 'COLUMN';
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Blogs.[AllowTrackbacks]', 'EnableTrackBackReceive', 'COLUMN';
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Blogs.[AutoTrackback]', 'EnableTrackBackSend', 'COLUMN';
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ADD
 [ModuleID] [int] NULL,
 [Image] [nvarchar](255) NULL,
 [Locale] [nvarchar](10) NULL,
 [FullLocalization] [bit] NULL,
 [IncludeImagesInFeed] [bit] NULL,
 [IncludeAuthorInFeed] [bit] NULL,
 [Copyright] [nvarchar](2000) NULL,
 [MustApproveGhostPosts] [bit] NULL,
 [PublishAsOwner] [bit] NULL,
 [EnablePingBackSend] [bit] NULL,
 [EnablePingBackReceive] [bit] NULL,
 [AutoApproveTrackBack] [bit] NULL,
 [AutoApprovePingBack] [bit] NULL,
 [CreatedByUserID] [int] NULL,
 [LastModifiedByUserID] [int] NULL,
 [LastModifiedOnDate] [datetime] NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET AutoApproveTrackBack=1
WHERE ISNULL(MustApproveTrackbacks,0)=0
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET AutoApproveTrackBack=0
WHERE MustApproveTrackbacks=1
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET
 IncludeImagesInFeed=1,
 IncludeAuthorInFeed=1,
 MustApproveGhostPosts=1,
 PublishAsOwner=0
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET ModuleID=m.ModuleId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.PortalId=b.PortalId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='View_Blog'
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET ModuleID=-1
WHERE ModuleID IS NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Blogs
SET CreatedByUserID=OwnerUserId
WHERE CreatedByUserID IS NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [ModuleID] [int] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [Description] [nvarchar](2000) NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [IncludeImagesInFeed] [bit] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [IncludeAuthorInFeed] [bit] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [MustApproveGhostPosts] [bit] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs ALTER COLUMN
 [PublishAsOwner] [bit] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs DROP COLUMN
 PortalID,
 AllowComments,
 AllowAnonymous,
 LastEntry,
 ShowFullName,
 ParentBlogID,
 SyndicateIndependant,
 SyndicationURL,
 EmailNotification,
 MustApproveComments,
 MustApproveAnonymous,
 MustApproveTrackbacks,
 UseCaptcha,
 AuthorMode
GO

/******* Fix for Blog_Entries table *******/
UPDATE {databaseOwner}{objectQualifier}Blog_Entries
SET CreatedUserId=b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Entries e
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON e.BlogID=b.BlogID
WHERE e.CreatedUserId IS NULL
GO

DELETE FROM {databaseOwner}{objectQualifier}Blog_Entries
FROM {databaseOwner}{objectQualifier}Blog_Entries e
 LEFT JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON e.BlogID=b.BlogID
WHERE b.BlogID IS NULL
GO

/******* ENTRIES->POSTS TABLE *******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_LegacyUrls') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_LegacyUrls(
 [Url] [nvarchar](300) NOT NULL,
 [EntryId] [int] NULL,
 [ContentItemId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Blog_LegacyUrls PRIMARY KEY CLUSTERED 
(
 [Url] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_Posts(
 [ContentItemId] [int] NOT NULL,
 [BlogID] [int] NOT NULL,
 [Title] [nvarchar](255) NOT NULL,
 [Summary] [nvarchar](max) NULL,
 [Image] [nvarchar](255) NULL,
 [Published] [bit] NOT NULL,
 [PublishedOnDate] [datetime] NOT NULL,
 [AllowComments] [bit] NULL,
 [DisplayCopyright] [bit] NOT NULL,
 [Copyright] [nvarchar](255) NULL,
 [Locale] [nvarchar](50) NULL,
 [ViewCount] [int] NULL
)
END;
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ContentTypes WHERE ContentType='DNN_Blog_Post')
EXEC {databaseOwner}{objectQualifier}AddContentType 'DNN_Blog_Post'
GO

-- main migration logic for the blogposts - start with adding content items
BEGIN
DECLARE db_cursor CURSOR FOR  
SELECT EntryId, AllowComments, BlogID, Entry, Copyright, DisplayCopyright, Published, AddedDate, Description, Title, CreatedUserId, ViewCount
FROM {databaseOwner}{objectQualifier}Blog_Entries
WHERE ISNULL(ContentItemID,-1)=-1

DECLARE 
 @EntryId INT,
 @AllowComments BIT, 
 @BlogID INT,
 @Content NVARCHAR(MAX),
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX),
 @Title NVARCHAR (255),
 @ViewCount INT, 
 @CreatedByUser INT
DECLARE @Links TABLE (EntryId INT, ContentItemId INT)

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @EntryId, @AllowComments, @BlogID, @Content, @Copyright, @DisplayCopyright, @Published, @PublishedOnDate, @Summary, @Title, @CreatedByUser, @ViewCount  

WHILE @@FETCH_STATUS = 0  
BEGIN
 DECLARE @ContentTypeID INT
 SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM {databaseOwner}{objectQualifier}ContentTypes WHERE ContentType='DNN_Blog_Post')
 DECLARE @ModuleId INT
 SET @ModuleId = (SELECT TOP 1 ModuleId FROM {databaseOwner}{objectQualifier}Blog_Blogs WHERE BlogID=@BlogID)
 DECLARE @Tmp TABLE (ContentItemID INT)
 DELETE FROM @Tmp
 INSERT INTO @Tmp
 EXEC {databaseOwner}{objectQualifier}AddContentItem @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @CreatedByUser;
 DECLARE @ContentItemID INT
 SET @ContentItemID = (SELECT TOP 1 ContentItemID FROM @Tmp)
 INSERT INTO @Links (EntryId, ContentItemId)
  VALUES (@EntryId, @ContentItemID);
 FETCH NEXT FROM db_cursor INTO @EntryId, @AllowComments, @BlogID, @Content, @Copyright, @DisplayCopyright, @Published, @PublishedOnDate, @Summary, @Title, @CreatedByUser, @ViewCount
END
CLOSE db_cursor  
DEALLOCATE db_cursor 

UPDATE {databaseOwner}{objectQualifier}Blog_Entries
 SET ContentItemID=l.ContentItemID
FROM {databaseOwner}{objectQualifier}Blog_Entries e
 INNER JOIN @Links l ON l.EntryId=e.EntryId;

END
GO

UPDATE {databaseOwner}{objectQualifier}ContentItems
SET ModuleId=b.ModuleId
FROM {databaseOwner}{objectQualifier}ContentItems ci
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries e ON ci.ContentItemID=e.ContentItemId
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON b.BlogID=e.BlogID
WHERE ci.ModuleId=-1
GO

-- now the posts table
BEGIN
DECLARE db_cursor CURSOR FOR  
SELECT EntryId, AllowComments, BlogID, Entry, Copyright, DisplayCopyright, Published, AddedDate, Description, Title, CreatedUserId, ViewCount, ContentItemID
FROM {databaseOwner}{objectQualifier}Blog_Entries

DECLARE 
 @EntryId INT,
 @AllowComments BIT, 
 @BlogID INT,
 @Content NVARCHAR(MAX),
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX),
 @Title NVARCHAR (255),
 @ViewCount INT, 
 @CreatedByUser INT,
 @ContentItemID INT

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @EntryId, @AllowComments, @BlogID, @Content, @Copyright, @DisplayCopyright, @Published, @PublishedOnDate, @Summary, @Title, @CreatedByUser, @ViewCount, @ContentItemID

WHILE @@FETCH_STATUS = 0  
BEGIN
 INSERT INTO {databaseOwner}{objectQualifier}Blog_Posts (
  [AllowComments],
  [BlogID],
  [ContentItemId],
  [Copyright],
  [DisplayCopyright],
  [Image],
  [Locale],
  [Published],
  [PublishedOnDate],
  [Summary],
  [Title],
  [ViewCount]
 )
  VALUES (  @AllowComments, @BlogID, @ContentItemID, @Copyright, @DisplayCopyright, NULL, '', @Published, @PublishedOnDate, @Summary, @Title, @ViewCount);

 FETCH NEXT FROM db_cursor INTO @EntryId, @AllowComments, @BlogID, @Content, @Copyright, @DisplayCopyright, @Published, @PublishedOnDate, @Summary, @Title, @CreatedByUser, @ViewCount, @ContentItemID
END
CLOSE db_cursor  
DEALLOCATE db_cursor 

END
GO

-- repair author ids - set to owner id
UPDATE {databaseOwner}{objectQualifier}ContentItems
SET CreatedByUserID=b.OwnerUserId
FROM {databaseOwner}{objectQualifier}ContentItems ci
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts p ON p.ContentItemID=ci.ContentItemID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON b.BlogID=p.BlogID
WHERE ci.CreatedByUserID=-1
GO

-- Add the legacy urls
INSERT INTO {databaseOwner}{objectQualifier}Blog_LegacyUrls
 ([Url], [EntryId], [ContentItemId])
SELECT
 y.[PermaLink], y.[EntryID], e.ContentItemID
FROM
(SELECT
 [PermaLink], MIN([EntryID]) EntryID
FROM
 (SELECT * FROM {databaseOwner}{objectQualifier}Blog_Entries
   WHERE [ContentItemId]<>-1
   AND NOT [PermaLink] IS NULL) x
  GROUP BY [PermaLink]) y
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries e ON e.EntryID=y.EntryID
GO

/******* CATEGORIES *******/
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Categories ADD
 TermID INT NULL
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Terms') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_Terms(
 [TermID] [int] NOT NULL,
 [ViewOrder] [int] NOT NULL
)
END
GO

-- create the categories first - this will migrate v4 categories
BEGIN
DECLARE db_cursor CURSOR FOR  
SELECT DISTINCT m.PortalID
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
DECLARE @PortalID INT

DECLARE @ScopeType INT
SET @ScopeType = (SELECT TOP 1 ScopeTypeID FROM {databaseOwner}{objectQualifier}Taxonomy_ScopeTypes WHERE ScopeType='Portal')
DECLARE @VocabTypeID INT
SET @VocabTypeID = (SELECT TOP 1 VocabularyTypeID FROM {databaseOwner}{objectQualifier}Taxonomy_VocabularyTypes WHERE VocabularyType='Heirarchy')

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @PortalID

WHILE @@FETCH_STATUS = 0  
BEGIN

 IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND [Key]='VocabularyId' AND [Value]<>'-1')
  AND (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Blog_Categories WHERE PortalID=@PortalID)>0
 BEGIN
  EXEC {databaseOwner}{objectQualifier}AddVocabulary @VocabTypeID, 'Blog Categories', '', 0, @PortalID, @ScopeType, -1;
  DECLARE @VocabID INT
  SET @VocabID = (SELECT TOP 1 VocabularyID FROM {databaseOwner}{objectQualifier}Taxonomy_Vocabularies WHERE Name='Blog Categories' AND ScopeID=@PortalID ORDER BY VocabularyID DESC);
  
  -- add root terms
  DECLARE cur1 CURSOR FOR
  SELECT CatID, Category FROM {databaseOwner}{objectQualifier}Blog_Categories
   WHERE PortalID=@PortalID AND ParentID=0
  DECLARE @CatID INT
  DECLARE @CatName NVARCHAR(250)
  DECLARE @NewTermID INT
  DECLARE @Tmp TABLE (ContentItemID INT)
  OPEN cur1
  FETCH NEXT FROM cur1 INTO @CatID, @CatName
  WHILE @@FETCH_STATUS = 0  
  BEGIN
   DELETE FROM @Tmp
   INSERT INTO @Tmp
   EXEC {databaseOwner}{objectQualifier}AddHeirarchicalTerm @VocabID, NULL, @CatName, '', 0, -1;
   SET @NewTermID = (SELECT TOP 1 ContentItemID FROM @Tmp)
   UPDATE {databaseOwner}{objectQualifier}Blog_Categories SET TermID=@NewTermID WHERE CatID=@CatID;
   INSERT INTO {databaseOwner}{objectQualifier}Blog_Terms (TermID, ViewOrder)
    VALUES (@NewTermID, 0);
   FETCH NEXT FROM cur1 INTO @CatID, @CatName
  END
  CLOSE cur1 
  DEALLOCATE cur1
  
  -- now keep sweeping through the tree
  WHILE EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Blog_Categories WHERE PortalID=@PortalID AND TermID IS NULL)
  BEGIN

  DECLARE cur2 CURSOR FOR
  SELECT c.CatID, c.Category, t.TermID FROM {databaseOwner}{objectQualifier}Blog_Categories c
   INNER JOIN {databaseOwner}{objectQualifier}Blog_Categories cp ON cp.CatID=c.ParentID
   INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON t.TermID=cp.TermID
   WHERE c.PortalID=@PortalID AND c.TermID IS NULL
  DECLARE @ParentTermID INT
  OPEN cur2
  FETCH NEXT FROM cur2 INTO @CatID, @CatName, @ParentTermID
  WHILE @@FETCH_STATUS = 0  
  BEGIN
   DELETE FROM @Tmp
   INSERT INTO @Tmp
   EXEC {databaseOwner}{objectQualifier}AddHeirarchicalTerm @VocabID, @ParentTermID, @CatName, '', 0, -1;
   SET @NewTermID = (SELECT TOP 1 ContentItemID FROM @Tmp)
   UPDATE {databaseOwner}{objectQualifier}Blog_Categories SET TermID=@NewTermID WHERE CatID=@CatID;
   INSERT INTO {databaseOwner}{objectQualifier}Blog_Terms (TermID, ViewOrder)
    VALUES (@NewTermID, 0);
   FETCH NEXT FROM cur2 INTO @CatID, @CatName, @ParentTermID
  END
  CLOSE cur2
  DEALLOCATE cur2

  END
    
  DELETE FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND [Key]='VocabularyId';
  INSERT INTO {databaseOwner}{objectQualifier}Blog_Settings (PortalID, [Key], [Value], [TabID])
   VALUES (@PortalID, 'VocabularyId', CAST(@VocabID AS nvarchar(1024)), -1)
 END
 
 FETCH NEXT FROM db_cursor INTO @PortalID
END
CLOSE db_cursor  
DEALLOCATE db_cursor 
END
GO

-- now handle improperly migrated content for v5 - set term IDs correctly
BEGIN
DECLARE db_cursor CURSOR FOR  
SELECT DISTINCT m.PortalID
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
DECLARE @PortalID INT

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @PortalID

WHILE @@FETCH_STATUS = 0  
BEGIN

 IF EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND [Key]='VocabularyId' AND [Value]<>'-1')
  AND (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Blog_Categories WHERE PortalID=@PortalID AND TermID IS NULL)>0
 BEGIN
  DECLARE @VocabID INT
  SET @VocabID = (SELECT TOP 1 CAST([Value] AS INT) FROM {databaseOwner}{objectQualifier}Blog_Settings WHERE PortalID=@PortalID AND [Key]='VocabularyId');
  UPDATE {databaseOwner}{objectQualifier}Blog_Categories
  SET TermID=t.TermID
  FROM {databaseOwner}{objectQualifier}Blog_Categories c
   INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON c.Category=t.Name AND t.VocabularyID=@VocabID
  WHERE c.PortalID=@PortalID AND c.TermID IS NULL
 END
 FETCH NEXT FROM db_cursor INTO @PortalID
END
CLOSE db_cursor  
DEALLOCATE db_cursor 
END
GO

-- insert the category links
INSERT INTO {databaseOwner}{objectQualifier}ContentItems_Tags
 (ContentItemID, TermID)
SELECT
 e.ContentItemId, oc.TermID
FROM
 {databaseOwner}{objectQualifier}Blog_Entries e
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Entry_Categories ec ON e.EntryID=ec.EntryID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Categories oc ON oc.CatID=ec.CatID
WHERE NOT oc.TermID IS NULL
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ContentItems_Tags cit WHERE cit.ContentItemID=e.ContentItemId AND cit.TermID=oc.TermID)
GO

/******* TAGS *******/
INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_Terms
   ([VocabularyID]
   ,[ParentTermID]
   ,[Name]
   ,[Description]
   ,[Weight]
   ,[TermLeft]
   ,[TermRight]
   ,[CreatedByUserID]
   ,[CreatedOnDate]
   ,[LastModifiedByUserID]
   ,[LastModifiedOnDate])
SELECT 1, NULL, t.Tag, '', 0, 0, 0, -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}Blog_Tags t
 WHERE NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Taxonomy_Terms WHERE Name=t.Tag AND VocabularyID=1)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Tags ADD
 TermID INT NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Tags
SET TermID=te.TermID
FROM {databaseOwner}{objectQualifier}Blog_Tags ta
 INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms te ON te.Name=ta.Tag AND te.VocabularyID=1
GO

-- insert the tag links
INSERT INTO {databaseOwner}{objectQualifier}ContentItems_Tags
 (ContentItemID, TermID)
SELECT DISTINCT
 e.ContentItemId, ot.TermID
FROM
 {databaseOwner}{objectQualifier}Blog_Entries e
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Entry_Tags et ON e.EntryID=et.EntryID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Tags ot ON ot.TagID=et.TagID
WHERE NOT ot.TermID IS NULL
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ContentItems_Tags cit WHERE cit.ContentItemID=e.ContentItemId AND cit.TermID=ot.TermID)
GO

/******* COMMENTS *******/
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments ADD
 [ContentItemId] [int] NULL,
 [ParentId] [int] NULL,
 [LastModifiedByUserID] [int] NULL,
 [LastModifiedOnDate] [datetime] NULL
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Comments
SET ContentItemId=e.ContentItemId
FROM {databaseOwner}{objectQualifier}Blog_Comments c
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Entries e ON e.EntryID=c.EntryID
GO

UPDATE {databaseOwner}{objectQualifier}Blog_Comments
SET LastModifiedByUserID=UserID,
 LastModifiedOnDate=AddedDate
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 DROP COLUMN EntryId
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 DROP COLUMN Title
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Comments.[AddedDate]', 'CreatedOnDate', 'COLUMN';
GO

EXEC sp_rename '{databaseOwner}{objectQualifier}Blog_Comments.[UserID]', 'CreatedByUserID', 'COLUMN';
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 ALTER COLUMN [Comment] [nvarchar](max) NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 ALTER COLUMN [ContentItemId] [int] NOT NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 ALTER COLUMN [CreatedByUserID] [int] NULL
GO

/******* MODULE DEFINITION *******/
UPDATE {databaseOwner}{objectQualifier}ModuleDefinitions
SET DefinitionName='Blog', FriendlyName='Blog'
WHERE DefinitionName='View_Blog'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'Template', '[G]blogList', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_List'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'ShowManagementPanel', 'False', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_List'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'Template', '[G]blogCalendar', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Archive'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'ShowManagementPanel', 'False', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Archive'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'Template', '[G]categoryList', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Categories'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'ShowManagementPanel', 'False', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Categories'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'Template', '[G]tagList', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Tags'
GO

INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'ShowManagementPanel', 'False', -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName='Blog_Tags'
GO

DELETE FROM {databaseOwner}{objectQualifier}TabModules
 FROM  {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName IN ('New_Blog','Search_Blog','Recent_Entries','Recent_Comments')
GO

DELETE FROM {databaseOwner}{objectQualifier}Modules
 FROM {databaseOwner}{objectQualifier}Modules m
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
WHERE
 md.DefinitionName IN ('New_Blog','Search_Blog','Recent_Entries','Recent_Comments')
GO

DELETE FROM {databaseOwner}{objectQualifier}ModuleDefinitions
WHERE
 DefinitionName IN ('New_Blog','Search_Blog','Recent_Entries','Recent_Comments')
GO

DECLARE @ModuleDefID INT
SET @ModuleDefID = (SELECT TOP 1 [ModuleDefId]
                     FROM {databaseOwner}{objectQualifier}ModuleDefinitions
                     WHERE DefinitionName='Blog')
UPDATE {databaseOwner}{objectQualifier}Modules
SET ModuleDefId=@ModuleDefID
FROM {databaseOwner}{objectQualifier}Modules m
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
 INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm ON dm.DesktopModuleID=md.DesktopModuleID
WHERE
 dm.ModuleName='Blog'
 AND md.DefinitionName<>'Blog'
GO

DELETE FROM {databaseOwner}{objectQualifier}ModuleDefinitions
WHERE
 DefinitionName IN ('Blog_List','Blog_Archive','Blog_Categories','Blog_Tags')
GO

DELETE FROM {databaseOwner}{objectQualifier}ModuleControls
FROM {databaseOwner}{objectQualifier}ModuleControls mc
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON md.ModuleDefID=mc.ModuleDefID
WHERE md.DefinitionName='Blog'
GO

/******* SETTINGS *******/
INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings
 (TabModuleID, SettingName, SettingValue, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
SELECT
 tm.TabModuleId, 'BlogModuleId', MIN(x.ModuleID), -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}TabModules tm
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleId=tm.ModuleId
 INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON m.ModuleDefID=md.ModuleDefID
 INNER JOIN (
SELECT DISTINCT m1.PortalID, b1.ModuleID, tm1.TabID
  FROM {databaseOwner}{objectQualifier}Blog_Blogs b1
   INNER JOIN {databaseOwner}{objectQualifier}Modules m1 ON m1.ModuleID=b1.ModuleID
   INNER JOIN {databaseOwner}{objectQualifier}TabModules tm1 ON tm1.ModuleID=m1.ModuleID
  ) x ON x.TabID=tm.TabID AND x.ModuleID <> tm.ModuleID
GROUP BY
 tm.TabModuleID, tm.ModuleID, md.DefinitionName
HAVING
 md.DefinitionName='Blog' 
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}TabModuleSettings WHERE TabModuleId=tm.TabModuleId AND SettingName='BlogModuleId')
GO


INSERT INTO {databaseOwner}{objectQualifier}ModuleSettings 
 ([ModuleID],[SettingName],[SettingValue],[CreatedByUserID],[CreatedOnDate],[LastModifiedByUserID],[LastModifiedOnDate])
SELECT DISTINCT
 x.ModuleID, bs.[Key], bs.[Value], -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}Blog_Settings bs
 INNER JOIN (
  SELECT PortalID, [Key], MAX(TabID) AS TabID
   FROM {databaseOwner}{objectQualifier}Blog_Settings
   GROUP BY PortalId, [Key]
 ) y ON y.PortalID=bs.PortalID AND y.[Key]=bs.[Key] AND y.TabID=bs.TabID
 INNER JOIN (
  SELECT DISTINCT m.PortalID, b.ModuleID
  FROM {databaseOwner}{objectQualifier}Blog_Blogs b
   INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
 ) x ON x.PortalID=bs.PortalID
WHERE bs.[Key] IN ('AllowWLW','AllowMultipleCategories','VocabularyId')
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE ModuleId=x.ModuleID AND SettingName=bs.[Key])
GO

INSERT INTO {databaseOwner}{objectQualifier}ModuleSettings 
 ([ModuleID],[SettingName],[SettingValue],[CreatedByUserID],[CreatedOnDate],[LastModifiedByUserID],[LastModifiedOnDate])
SELECT DISTINCT
 x.ModuleID, 'RssAllowContentInFeed', bs.[Value], -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}Blog_Settings bs
 INNER JOIN (
  SELECT PortalID, [Key], MAX(TabID) AS TabID
   FROM {databaseOwner}{objectQualifier}Blog_Settings
   GROUP BY PortalId, [Key]
 ) y ON y.PortalID=bs.PortalID AND y.[Key]=bs.[Key] AND y.TabID=bs.TabID
 INNER JOIN (
  SELECT DISTINCT m.PortalID, b.ModuleID
  FROM {databaseOwner}{objectQualifier}Blog_Blogs b
   INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
 ) x ON x.PortalID=bs.PortalID
WHERE bs.[Key] = 'IncludeBody'
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE ModuleId=x.ModuleID AND SettingName='RssAllowContentInFeed')
GO

INSERT INTO {databaseOwner}{objectQualifier}ModuleSettings 
 ([ModuleID],[SettingName],[SettingValue],[CreatedByUserID],[CreatedOnDate],[LastModifiedByUserID],[LastModifiedOnDate])
SELECT DISTINCT
 x.ModuleID, 'RssMaxNrItems', bs.[Value], -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}Blog_Settings bs
 INNER JOIN (
  SELECT PortalID, [Key], MAX(TabID) AS TabID
   FROM {databaseOwner}{objectQualifier}Blog_Settings
   GROUP BY PortalId, [Key]
 ) y ON y.PortalID=bs.PortalID AND y.[Key]=bs.[Key] AND y.TabID=bs.TabID
 INNER JOIN (
  SELECT DISTINCT m.PortalID, b.ModuleID
  FROM {databaseOwner}{objectQualifier}Blog_Blogs b
   INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
 ) x ON x.PortalID=bs.PortalID
WHERE bs.[Key] = 'RecentRssEntriesMax'
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE ModuleId=x.ModuleID AND SettingName='RssMaxNrItems')
GO

INSERT INTO {databaseOwner}{objectQualifier}ModuleSettings 
 ([ModuleID],[SettingName],[SettingValue],[CreatedByUserID],[CreatedOnDate],[LastModifiedByUserID],[LastModifiedOnDate])
SELECT DISTINCT
 x.ModuleID, 'AutoGeneratedSummaryLength', bs.[Value], -1, GETDATE(), -1, GETDATE()
FROM {databaseOwner}{objectQualifier}Blog_Settings bs
 INNER JOIN (
  SELECT PortalID, [Key], MAX(TabID) AS TabID
   FROM {databaseOwner}{objectQualifier}Blog_Settings
   GROUP BY PortalId, [Key]
 ) y ON y.PortalID=bs.PortalID AND y.[Key]=bs.[Key] AND y.TabID=bs.TabID
 INNER JOIN (
  SELECT DISTINCT m.PortalID, b.ModuleID
  FROM {databaseOwner}{objectQualifier}Blog_Blogs b
   INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=b.ModuleID
 ) x ON x.PortalID=bs.PortalID
WHERE bs.[Key] = 'SummaryMaxLength'
 AND NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE ModuleId=x.ModuleID AND SettingName='AutoGeneratedSummaryLength')
GO

/******* COMPLETING DATA SCHEMA *******/
/******* COMPLETING TABLES CREATION *******/
DROP TABLE {databaseOwner}{objectQualifier}Blog_MetaWeblogData
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Entry_Categories
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Entry_Tags
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Entries
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Categories
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Tags
GO

DROP TABLE {databaseOwner}{objectQualifier}Blog_Settings
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs
 ADD CONSTRAINT PK_{objectQualifier}Blog_Blogs_BlogID PRIMARY KEY CLUSTERED
(
 [BlogID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs') AND name = N'IX_{objectQualifier}Blog_Blogs_ModuleID')
CREATE NONCLUSTERED INDEX IX_{objectQualifier}Blog_Blogs_ModuleID ON {databaseOwner}{objectQualifier}Blog_Blogs 
(
 [ModuleID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments
 ADD CONSTRAINT PK_{objectQualifier}Blog_Comments_CommentID PRIMARY KEY CLUSTERED 
(
 [CommentID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Posts
 ADD CONSTRAINT PK_{objectQualifier}Blog_Posts PRIMARY KEY CLUSTERED 
(
 [ContentItemId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts') AND name = N'IX_{objectQualifier}Blog_Posts_BlogID')
CREATE NONCLUSTERED INDEX IX_{objectQualifier}Blog_Posts_BlogID ON {databaseOwner}{objectQualifier}Blog_Posts 
(
 [BlogID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts') AND name = N'IX_{objectQualifier}Blog_Posts_PublishedOnDate')
CREATE NONCLUSTERED INDEX IX_{objectQualifier}Blog_Posts_PublishedOnDate ON {databaseOwner}{objectQualifier}Blog_Posts 
(
 [PublishedOnDate] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Blog_Terms
 ADD CONSTRAINT PK_{objectQualifier}Blog_Terms PRIMARY KEY CLUSTERED 
(
 [TermID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogLocalization') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_BlogLocalization(
 [BlogID] [int] NOT NULL,
 [Locale] [nvarchar](10) NOT NULL,
 [Title] [nvarchar](255) NOT NULL,
 [Description] [nvarchar](2000) NULL,
 CONSTRAINT PK_{objectQualifier}Blog_BlogLocalization PRIMARY KEY CLUSTERED 
(
 [BlogID] ASC,
 [Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogPermissions') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_BlogPermissions(
 [AllowAccess] [bit] NULL,
 [BlogId] [int] NOT NULL,
 [Expires] [datetime] NULL,
 [PermissionId] [int] NOT NULL,
 [RoleId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Blog_BlogPermissions PRIMARY KEY CLUSTERED 
(
 [BlogId] ASC,
 [PermissionId] ASC,
 [RoleId] ASC,
 [UserId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END;
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogPermissions') AND name = N'{objectQualifier}IX_Blog_BlogPermissions_PermissionId')
CREATE NONCLUSTERED INDEX {objectQualifier}IX_Blog_BlogPermissions_PermissionId ON {databaseOwner}{objectQualifier}Blog_BlogPermissions 
(
 [PermissionId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogPermissions') AND name = N'{objectQualifier}IX_Blog_BlogPermissions_RoleId')
CREATE NONCLUSTERED INDEX {objectQualifier}IX_Blog_BlogPermissions_RoleId ON {databaseOwner}{objectQualifier}Blog_BlogPermissions 
(
 [RoleId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_CommentKarmas') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_CommentKarmas(
 [CommentId] [int] NOT NULL,
 [UserId] [int] NOT NULL,
 [Karma] [int] NOT NULL,
 [Datime] [datetime] NOT NULL,
 CONSTRAINT PK_{objectQualifier}Blog_CommentReports PRIMARY KEY CLUSTERED 
(
 [CommentId] ASC,
 [UserId] ASC,
 [Karma] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_PostLocalization') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_PostLocalization(
 [ContentItemId] [int] NOT NULL,
 [Locale] [nvarchar](10) NOT NULL,
 [Title] [nvarchar](255) NOT NULL,
 [Summary] [nvarchar](max) NULL,
 [LocalizedContentItemId] [int] NULL,
 CONSTRAINT PK_{objectQualifier}Blog_PostLocalization PRIMARY KEY CLUSTERED 
(
 [ContentItemId] ASC,
 [Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_TermLocalization') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Blog_TermLocalization(
 [TermID] [int] NOT NULL,
 [Locale] [nvarchar](50) NOT NULL,
 [Name] [nvarchar](250) NOT NULL,
 [Description] [nvarchar](2500) NULL,
 CONSTRAINT PK_{objectQualifier}Blog_TermLocalizations PRIMARY KEY CLUSTERED 
(
 [TermID] ASC,
 [Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

/******* STRUCTURE *******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_BlogLocalization_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_BlogLocalization  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_BlogLocalization_Blogs FOREIGN KEY([BlogID])
REFERENCES {objectQualifier}Blog_Blogs ([BlogID])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_BlogLocalization_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_BlogLocalization CHECK CONSTRAINT FK_{objectQualifier}Blog_BlogLocalization_Blogs
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_BlogPermissions_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogPermissions'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_BlogPermissions  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_BlogPermissions_Blogs FOREIGN KEY([BlogId])
REFERENCES {objectQualifier}Blog_Blogs ([BlogID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_BlogPermissions_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogPermissions'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_BlogPermissions CHECK CONSTRAINT FK_{objectQualifier}Blog_BlogPermissions_Blogs
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Blogs_Modules') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs  WITH NOCHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_Blogs_Modules FOREIGN KEY([ModuleID])
REFERENCES {objectQualifier}Modules ([ModuleID])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Blogs_Modules') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Blogs'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Blogs NOCHECK CONSTRAINT FK_{objectQualifier}Blog_Blogs_Modules
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_CommentReports_Comments') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_CommentKarmas'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_CommentKarmas  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_CommentReports_Comments FOREIGN KEY([CommentId])
REFERENCES {objectQualifier}Blog_Comments ([CommentID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_CommentReports_Comments') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_CommentKarmas'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_CommentKarmas CHECK CONSTRAINT FK_{objectQualifier}Blog_CommentReports_Comments
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Comments') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_Comments FOREIGN KEY([ContentItemId])
REFERENCES {objectQualifier}Blog_Posts ([ContentItemId])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Comments') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Comments'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Comments CHECK CONSTRAINT FK_{objectQualifier}Blog_Comments
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_LegacyUrls_Posts') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_LegacyUrls'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_LegacyUrls  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_LegacyUrls_Posts FOREIGN KEY([ContentItemId])
REFERENCES {objectQualifier}Blog_Posts ([ContentItemId])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_LegacyUrls_Posts') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_LegacyUrls'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_LegacyUrls CHECK CONSTRAINT FK_{objectQualifier}Blog_LegacyUrls_Posts
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_PostLocalization_ContentItems') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_PostLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_PostLocalization  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_PostLocalization_ContentItems FOREIGN KEY([ContentItemId])
REFERENCES {objectQualifier}ContentItems ([ContentItemID])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_PostLocalization_ContentItems') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_PostLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_PostLocalization CHECK CONSTRAINT FK_{objectQualifier}Blog_PostLocalization_ContentItems
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entries_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Posts  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_Entries_Blogs FOREIGN KEY([BlogID])
REFERENCES {objectQualifier}Blog_Blogs ([BlogID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entries_Blogs') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Posts CHECK CONSTRAINT FK_{objectQualifier}Blog_Entries_Blogs
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entries_ContentItems') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Posts  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_Entries_ContentItems FOREIGN KEY([ContentItemId])
REFERENCES {objectQualifier}ContentItems ([ContentItemID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Entries_ContentItems') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Posts'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Posts CHECK CONSTRAINT FK_{objectQualifier}Blog_Entries_ContentItems
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_TermLocalization_Taxonomy_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_TermLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_TermLocalization  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_TermLocalization_Taxonomy_Terms FOREIGN KEY([TermID])
REFERENCES {objectQualifier}Taxonomy_Terms ([TermID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_TermLocalization_Taxonomy_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_TermLocalization'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_TermLocalization CHECK CONSTRAINT FK_{objectQualifier}Blog_TermLocalization_Taxonomy_Terms
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Terms_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Terms'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Terms  WITH CHECK ADD  CONSTRAINT FK_{objectQualifier}Blog_Terms_Terms FOREIGN KEY([TermID])
REFERENCES {objectQualifier}Taxonomy_Terms ([TermID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}Blog_Terms_Terms') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Terms'))
ALTER TABLE {databaseOwner}{objectQualifier}Blog_Terms CHECK CONSTRAINT FK_{objectQualifier}Blog_Terms_Terms
GO

/******* TRIGGERS *******/
/******* VIEWS *******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Blog_BlogPermissions'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_BlogPermissions
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Blog_BlogPermissions
AS
SELECT     bp.AllowAccess, bp.BlogId, bp.Expires, bp.PermissionId, bp.RoleId, bp.UserId, ISNULL(u.Username, N'') AS Username, ISNULL(u.DisplayName, N'') AS DisplayName, 
                      ISNULL(r.RoleName, N'') AS RoleName
FROM         {databaseOwner}{objectQualifier}Blog_BlogPermissions AS bp LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Roles AS r ON bp.RoleId = r.RoleID LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON bp.UserId = u.UserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Blog_Blogs'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_Blogs
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Blog_Blogs
AS
SELECT
 b.*,
 u.DisplayName, u.Email, u.Username,
 p.NrPosts, p.LastPublishDate, p.NrViews, p.FirstPublishDate
FROM
 {databaseOwner}{objectQualifier}Blog_Blogs AS b
 INNER JOIN {databaseOwner}{objectQualifier}Users AS u ON b.OwnerUserId = u.UserID
 LEFT OUTER JOIN
  (SELECT 
    BlogID,
    COUNT(ContentItemId) AS NrPosts, 
    SUM(ViewCount) AS NrViews,
    MAX(PublishedOnDate) AS LastPublishDate,
    MIN(PublishedOnDate) AS FirstPublishDate
   FROM 
    (SELECT * FROM {databaseOwner}{objectQualifier}Blog_Posts WHERE PublishedOnDate < GETDATE()) AS posts
   GROUP BY BlogID, Published
   HAVING (Published = 1)) AS p ON p.BlogID = b.BlogID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Blog_Comments'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_Comments
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Blog_Comments
AS
SELECT
 c.*,
 ISNULL(u.Username, '') AS Username,
 ISNULL(u.DisplayName, c.Author) AS DisplayName,
 (SELECT COUNT(ck1.UserId) AS Expr1
   FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck1
   WHERE (ck1.CommentID = c.CommentID) AND (ck1.Karma = 0)) AS Likes,
 (SELECT COUNT(ck2.UserId) AS Expr1
   FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas AS ck2
   WHERE (ck2.CommentID = c.CommentID) AND (ck2.Karma = 1)) AS Dislikes,
 (SELECT COUNT(ck3.UserId) AS Expr1
   FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas AS ck3
   WHERE (ck3.CommentID = c.CommentID) AND (ck3.Karma = 2)) AS Reports
FROM {databaseOwner}{objectQualifier}Blog_Comments AS c
 LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS u ON c.CreatedByUserID = u.UserID
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Blog_Posts'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Blog_Posts
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Blog_Posts
AS
SELECT
 p.[BlogID],
 p.[Title],
 p.[Summary],
 p.[Image],
 p.[Published],
 p.[PublishedOnDate],
 p.[AllowComments],
 p.[DisplayCopyright],
 p.[Copyright],
 p.[Locale],
 p.[ViewCount],
 ci.*,
 u.Username, u.Email, u.DisplayName
FROM
 {databaseOwner}{objectQualifier}Blog_Posts AS p
 LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS ci ON p.ContentItemId = ci.ContentItemID AND p.ContentItemId = ci.ContentItemID
 INNER JOIN {databaseOwner}{objectQualifier}Users AS u ON ci.CreatedByUserID = u.UserID
GO

/******* FUNCTIONS *******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_BlogList') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}Blog_BlogList
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}Blog_BlogList
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS
RETURN
(SELECT 
  b.*, 
  bl.Locale AS AltLocale, bl.Title AS AltTitle, bl.[Description] AS AltDescription
 FROM {databaseOwner}{objectQualifier}vw_Blog_Blogs AS b
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}Blog_BlogLocalization AS bl ON b.BlogID = bl.BlogID AND bl.Locale=@Locale)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Permissions') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}Blog_Permissions
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}Blog_Permissions
 (@Count INT)
RETURNS TABLE
AS
RETURN
SELECT TOP(@Count) ROW_NUMBER() OVER (ORDER BY name) - 1 AS n FROM sys.objects
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_PostList') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}Blog_PostList
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}Blog_PostList
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS
RETURN
(SELECT
  p.*, 
  pl.Locale AS AltLocale, pl.Title AS AltTitle, pl.Summary AS AltSummary, lci.Content AS AltContent
 FROM {databaseOwner}{objectQualifier}vw_Blog_Posts AS p
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}Blog_PostLocalization AS pl ON p.ContentItemID = pl.ContentItemId AND pl.Locale=@Locale
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems lci ON pl.LocalizedContentItemId=lci.ContentItemID)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_Split') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}Blog_Split
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}Blog_Split (@s NVARCHAR(4000), @sep CHAR(1))
RETURNS table
AS
RETURN (
    WITH Pieces(pn, start, stop) AS (
      SELECT 1, 1, CHARINDEX(@sep, @s)
      UNION ALL
      SELECT pn + 1, stop + 1, CHARINDEX(@sep, @s, stop + 1)
      FROM Pieces
      WHERE stop > 0
    )
    SELECT pn,
      SUBSTRING(@s, start, CASE WHEN stop > 0 THEN stop-start ELSE 512 END) AS s
    FROM Pieces
  )
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_TermList') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}Blog_TermList
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}Blog_TermList
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS
RETURN
(SELECT
  t.*,
  bt.ViewOrder,
  tl.Locale AS AltLocale, tl.Name AS AltName, tl.Description AS AltDescription
 FROM {databaseOwner}{objectQualifier}Taxonomy_Terms AS t
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}Blog_Terms AS bt ON bt.TermID=t.TermID
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}Blog_TermLocalization AS tl ON t.TermID = tl.TermID AND tl.Locale=@Locale)
GO

/******* SPROCS *******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlog
 @AutoApprovePingBack BIT, 
 @ModuleID INT, 
 @AutoApproveTrackBack BIT, 
 @Copyright NVARCHAR (2000), 
 @Description NVARCHAR (2000), 
 @EnablePingBackReceive BIT, 
 @EnablePingBackSend BIT, 
 @EnableTrackBackReceive BIT, 
 @EnableTrackBackSend BIT, 
 @FullLocalization BIT, 
 @Image NVARCHAR (255), 
 @IncludeAuthorInFeed BIT, 
 @IncludeImagesInFeed BIT, 
 @Locale NVARCHAR (50), 
 @MustApproveGhostPosts BIT, 
 @OwnerUserId INT, 
 @PublishAsOwner BIT, 
 @Published BIT, 
 @Syndicated BIT, 
 @SyndicationEmail NVARCHAR (255), 
 @Title NVARCHAR (255), 
 @CreatedByUser INT
AS
INSERT INTO {databaseOwner}{objectQualifier}Blog_Blogs (
 [AutoApprovePingBack],
 [ModuleID],
 [AutoApproveTrackBack],
 [Copyright],
 [CreatedByUserID],
 [CreatedOnDate],
 [Description],
 [EnablePingBackReceive],
 [EnablePingBackSend],
 [EnableTrackBackReceive],
 [EnableTrackBackSend],
 [FullLocalization],
 [Image],
 [IncludeAuthorInFeed],
 [IncludeImagesInFeed],
 [LastModifiedByUserID],
 [LastModifiedOnDate],
 [Locale],
 [MustApproveGhostPosts],
 [OwnerUserId],
 [PublishAsOwner],
 [Published],
 [Syndicated],
 [SyndicationEmail],
 [Title]
)
 VALUES ( @AutoApprovePingBack, @ModuleID, @AutoApproveTrackBack, @Copyright, @CreatedByUser, GETDATE(), @Description, @EnablePingBackReceive, @EnablePingBackSend, @EnableTrackBackReceive, @EnableTrackBackSend, @FullLocalization, @Image, @IncludeAuthorInFeed, @IncludeImagesInFeed, @CreatedByUser, GETDATE(), @Locale, @MustApproveGhostPosts, @OwnerUserId, @PublishAsOwner, @Published, @Syndicated, @SyndicationEmail, @Title)
select SCOPE_IDENTITY()
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddBlogPermission') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlogPermission
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddBlogPermission
 @AllowAccess BIT, 
 @BlogId INT, 
 @Expires DATETIME, 
 @PermissionId INT, 
 @RoleId INT, 
 @UserId INT
AS
INSERT INTO {databaseOwner}{objectQualifier}Blog_BlogPermissions (
 [AllowAccess],
 [BlogId],
 [Expires],
 [PermissionId],
 [RoleId],
 [UserId])
VALUES (
 @AllowAccess,
 @BlogId,
 @Expires,
 @PermissionId,
 @RoleId,
 @UserId)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddComment
 @Approved BIT, 
 @Author NVARCHAR (50), 
 @Comment NVARCHAR (MAX), 
 @ContentItemId INT, 
 @Email NVARCHAR (255), 
 @ParentId INT, 
 @Website NVARCHAR (255), 
 @CreatedByUser INT
AS
INSERT INTO {databaseOwner}{objectQualifier}Blog_Comments (
 [Approved],
 [Author],
 [Comment],
 [ContentItemId],
 [CreatedByUserID],
 [CreatedOnDate],
 [Email],
 [LastModifiedByUserID],
 [LastModifiedOnDate],
 [ParentId],
 [Website]
)
 VALUES ( @Approved, @Author, @Comment, @ContentItemId, @CreatedByUser, GETDATE(), @Email, @CreatedByUser, GETDATE(), @ParentId, @Website)
select SCOPE_IDENTITY()
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddCommentKarma') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddCommentKarma
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddCommentKarma
 @CommentId INT, 
 @UserId INT,
 @Karma INT
AS
DECLARE @Res INT
SET @Res = -1;
IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas WHERE CommentId=@CommentId AND UserId=@UserId AND Karma=@Karma)
BEGIN
 INSERT INTO {databaseOwner}{objectQualifier}Blog_CommentKarmas
  (CommentId, UserId, Karma, Datime)
 VALUES
  (@CommentId, @UserId, @Karma, GETDATE());
 SET @Res = @CommentId;
END
SELECT @Res
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddLegacyUrl') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddLegacyUrl
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddLegacyUrl
 @ContentItemId INT, 
 @EntryId INT, 
 @Url NVARCHAR (300)
AS
INSERT INTO {databaseOwner}{objectQualifier}Blog_LegacyUrls (
 [Url],
 [ContentItemId],
 [EntryId]
)
 VALUES ( @Url, @ContentItemId, @EntryId)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddPost') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddPost
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddPost
 @AllowComments BIT, 
 @BlogID INT,
 @Content NVARCHAR(MAX),
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Image NVARCHAR (255), 
 @Locale VARCHAR (10), 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX),
 @TermIds NVARCHAR(1000),
 @Title NVARCHAR (255),
 @ViewCount INT, 
 @CreatedByUser INT
AS
DECLARE @ContentTypeID INT
SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM {databaseOwner}{objectQualifier}ContentTypes WHERE ContentType='DNN_Blog_Post')
DECLARE @ModuleId INT
SET @ModuleId = (SELECT TOP 1 ModuleId FROM {databaseOwner}{objectQualifier}Blog_Blogs WHERE BlogID=@BlogID)
DECLARE @Tmp TABLE (ContentItemID INT)
INSERT INTO @Tmp
EXEC {databaseOwner}{objectQualifier}AddContentItem @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @CreatedByUser;
DECLARE @ContentItemID INT
SET @ContentItemID = (SELECT TOP 1 ContentItemID FROM @Tmp)
INSERT INTO {databaseOwner}{objectQualifier}Blog_Posts (
 [AllowComments],
 [BlogID],
 [ContentItemId],
 [Copyright],
 [DisplayCopyright],
 [Image],
 [Locale],
 [Published],
 [PublishedOnDate],
 [Summary],
 [Title],
 [ViewCount]
)
 VALUES (  @AllowComments, @BlogID, @ContentItemID, @Copyright, @DisplayCopyright, @Image, @Locale, @Published, @PublishedOnDate, @Summary, @Title, @ViewCount);
IF @TermIds<>''
BEGIN
 DECLARE @ids TABLE (s NVARCHAR(512))
 INSERT INTO @ids (s) SELECT s FROM {databaseOwner}{objectQualifier}Blog_Split(@TermIds,';');
 INSERT INTO {databaseOwner}{objectQualifier}ContentItems_Tags ([ContentItemID], [TermID])
 SELECT @ContentItemID, CAST(i.s AS INT)
 FROM @ids i;
END
SELECT @ContentItemID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_AddPostView') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_AddPostView
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_AddPostView
 @ContentTypeID INT
AS
UPDATE {databaseOwner}{objectQualifier}Blog_Posts
SET [ViewCount] = ISNULL([ViewCount],0) + 1
WHERE [ContentItemId]=@ContentTypeID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_ApproveComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_ApproveComment
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_ApproveComment
 @CommentId INT
AS
UPDATE {databaseOwner}{objectQualifier}Blog_Comments
SET Approved=1
WHERE CommentID=@CommentId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlog
 @BlogID INT
AS
DELETE FROM {databaseOwner}{objectQualifier}Blog_Blogs
WHERE
 [BlogID] = @BlogID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteBlogPermissions') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlogPermissions
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteBlogPermissions 
 @BlogId INT
AS
BEGIN
DELETE FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions
WHERE BlogId=@BlogId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeleteComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteComment
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeleteComment
 @CommentID INT
AS
DELETE FROM {databaseOwner}{objectQualifier}Blog_Comments
WHERE
 [CommentID] = @CommentID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_DeletePost') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_DeletePost
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_DeletePost
 @ContentItemId INT
AS
DELETE FROM {databaseOwner}{objectQualifier}ContentItems
WHERE
 ContentItemId = @ContentItemId;
DELETE FROM {databaseOwner}{objectQualifier}Blog_Posts
WHERE
 ContentItemId = @ContentItemId;
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetAuthors') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetAuthors
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetAuthors
 @ModuleId INT,
 @BlogID INT
AS
SELECT
 *
FROM {databaseOwner}{objectQualifier}vw_Users u
 INNER JOIN (
SELECT
 ci.CreatedByUserID, COUNT(ci.ContentItemID) NrPosts, SUM(ViewCount) AS NrViews, MAX(p.PublishedOnDate) LastPublishDate, MIN(p.PublishedOnDate) FirstPublishDate 
FROM {databaseOwner}{objectQualifier}Blog_Posts p
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID=p.ContentItemId AND p.Published=1
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON p.BlogID=b.BlogID AND b.ModuleID=@ModuleId AND (@BlogID=-1 OR b.BlogID=@BlogID)
GROUP BY ci.CreatedByUserID
 ) ub ON ub.CreatedByUserID=u.UserID
ORDER BY u.LastName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlog
 @BlogId INT,
 @UserId INT,
 @Locale NVARCHAR(10)
AS
BEGIN
SELECT
 b.*,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=0) AS CanEdit,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=1) AS CanAdd,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=2) AS CanApprove
 
FROM {databaseOwner}{objectQualifier}Blog_BlogList(@Locale) b
 WHERE b.BlogID=@BlogId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogCalendar') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogCalendar
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogCalendar
 @ModuleId INT,
 @BlogId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 PostMonth, 
 PostYear,
 COUNT(*) PostCount,
 SUM(ViewCount) ViewCount
FROM
(SELECT
  MONTH(p.PublishedOnDate) PostMonth, YEAR(p.PublishedOnDate) PostYear, p.ViewCount
 FROM {databaseOwner}{objectQualifier}Blog_Posts p
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON b.BlogID=p.BlogID
 WHERE
  p.Published=1 
  AND (p.BlogID=@BlogId OR @BlogId=-1) 
  AND b.ModuleID=@ModuleId
  AND (@Locale IS NULL OR ISNULL(p.Locale, b.Locale)=@Locale)) pd
GROUP BY PostYear, PostMonth
ORDER BY PostYear DESC, PostMonth DESC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogLocalizations') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogLocalizations
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogLocalizations
 @BlogId INT
AS
BEGIN
SELECT
 bl.*
FROM {databaseOwner}{objectQualifier}Blog_BlogLocalization bl
WHERE bl.BlogID=@BlogId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogPermissionsByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogPermissionsByBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogPermissionsByBlog
 @BlogId INT
AS
BEGIN
SELECT bp.*
FROM {databaseOwner}{objectQualifier}vw_Blog_BlogPermissions bp
WHERE bp.BlogId=@BlogId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogsByModule') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByModule
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByModule
 @ModuleId INT,
 @UserId INT,
 @Locale NVARCHAR(10)
AS
BEGIN
SELECT
 b.*,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=0) AS CanEdit,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=1) AS CanAdd,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=2) AS CanApprove
 
FROM {databaseOwner}{objectQualifier}Blog_BlogList(@Locale) b
WHERE b.ModuleID=@ModuleId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetBlogsByPortal') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByPortal
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetBlogsByPortal
 @PortalId INT,
 @UserId INT,
 @Locale NVARCHAR(10)
AS
BEGIN
SELECT
 b.*,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=0) AS CanEdit,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=1) AS CanAdd,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId=2) AS CanApprove
 
FROM {databaseOwner}{objectQualifier}Blog_BlogList(@Locale) b
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON b.ModuleID=m.ModuleID
WHERE m.PortalID=@PortalId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetComment
 @CommentID INT,
 @UserID INT
AS
SELECT
 c.*,
 (SELECT COUNT(ck1.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck1
  WHERE ck1.UserId=@UserID AND ck1.CommentId=c.CommentID AND ck1.Karma=0) AS Liked,
 (SELECT COUNT(ck2.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck2
  WHERE ck2.UserId=@UserID AND ck2.CommentId=c.CommentID AND ck2.Karma=1) AS Disliked,
 (SELECT COUNT(ck3.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck3
  WHERE ck3.UserId=@UserID AND ck3.CommentId=c.CommentID AND ck3.Karma=2) AS Reported
FROM
 {databaseOwner}{objectQualifier}vw_Blog_Comments c
WHERE
 c.CommentID = @CommentID
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByContentItem') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByContentItem
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByContentItem
 @ContentItemId INT,
 @IncludeNonApproved BIT,
 @UserID INT
AS
SELECT
 c.*,
 (SELECT COUNT(ck1.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck1
  WHERE ck1.UserId=@UserID AND ck1.CommentId=c.CommentID AND ck1.Karma=0) AS Liked,
 (SELECT COUNT(ck2.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck2
  WHERE ck2.UserId=@UserID AND ck2.CommentId=c.CommentID AND ck2.Karma=1) AS Disliked,
 (SELECT COUNT(ck3.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck3
  WHERE ck3.UserId=@UserID AND ck3.CommentId=c.CommentID AND ck3.Karma=2) AS Reported
FROM
 {databaseOwner}{objectQualifier}vw_Blog_Comments c
WHERE
 c.ContentItemId = @ContentItemId
 AND (c.Approved = 1 OR @IncludeNonApproved = 1)
ORDER BY
 c.CreatedOnDate DESC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetCommentsByModuleId') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByModuleId
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetCommentsByModuleId
 @ModuleId INT,
 @UserID INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
DECLARE @Blogs TABLE (
 [BlogID] INT,
 [CanViewComment] INT,
 [Owner] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId = 5) AS [CanViewComment],
 b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
WHERE b.ModuleID=@ModuleId;
SELECT
 Tbl.*,
 (SELECT COUNT(ck1.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck1
  WHERE ck1.UserId=@UserID AND ck1.CommentId=Tbl.CommentID AND ck1.Karma=0) AS Liked,
 (SELECT COUNT(ck2.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck2
  WHERE ck2.UserId=@UserID AND ck2.CommentId=Tbl.CommentID AND ck2.Karma=1) AS Disliked,
 (SELECT COUNT(ck3.Datime) FROM {databaseOwner}{objectQualifier}Blog_CommentKarmas ck3
  WHERE ck3.UserId=@UserID AND ck3.CommentId=Tbl.CommentID AND ck3.Karma=2) AS Reported
FROM
(SELECT
 c.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'APPROVED DESC' THEN c.[Approved] END DESC,
  CASE @OrderBy WHEN 'APPROVED' THEN c.[Approved] END ASC,
  CASE @OrderBy WHEN 'APPROVED ASC' THEN c.[Approved] END ASC,
  CASE @OrderBy WHEN 'AUTHOR DESC' THEN c.[Author] END DESC,
  CASE @OrderBy WHEN 'AUTHOR' THEN c.[Author] END ASC,
  CASE @OrderBy WHEN 'AUTHOR ASC' THEN c.[Author] END ASC,
  CASE @OrderBy WHEN 'COMMENT DESC' THEN c.[Comment] END DESC,
  CASE @OrderBy WHEN 'COMMENT' THEN c.[Comment] END ASC,
  CASE @OrderBy WHEN 'COMMENT ASC' THEN c.[Comment] END ASC,
  CASE @OrderBy WHEN 'COMMENTID DESC' THEN c.[CommentID] END DESC,
  CASE @OrderBy WHEN 'COMMENTID' THEN c.[CommentID] END ASC,
  CASE @OrderBy WHEN 'COMMENTID ASC' THEN c.[CommentID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN c.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN c.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN c.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN c.[CreatedByUserID] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN c.[CreatedByUserID] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN c.[CreatedByUserID] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN c.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN c.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN c.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'EMAIL DESC' THEN c.[Email] END DESC,
  CASE @OrderBy WHEN 'EMAIL' THEN c.[Email] END ASC,
  CASE @OrderBy WHEN 'EMAIL ASC' THEN c.[Email] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN c.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN c.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN c.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN c.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN c.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN c.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PARENTID DESC' THEN c.[ParentId] END DESC,
  CASE @OrderBy WHEN 'PARENTID' THEN c.[ParentId] END ASC,
  CASE @OrderBy WHEN 'PARENTID ASC' THEN c.[ParentId] END ASC,
  CASE @OrderBy WHEN 'WEBSITE DESC' THEN c.[Website] END DESC,
  CASE @OrderBy WHEN 'WEBSITE' THEN c.[Website] END ASC,
  CASE @OrderBy WHEN 'WEBSITE ASC' THEN c.[Website] END ASC,
  CASE @OrderBy WHEN 'LIKES DESC' THEN c.[Likes] END DESC,
  CASE @OrderBy WHEN 'LIKES' THEN c.[Likes] END ASC,
  CASE @OrderBy WHEN 'LIKES ASC' THEN c.[Likes] END ASC,
  CASE @OrderBy WHEN 'DISLIKES DESC' THEN c.[Dislikes] END DESC,
  CASE @OrderBy WHEN 'DISLIKES' THEN c.[Dislikes] END ASC,
  CASE @OrderBy WHEN 'DISLIKES ASC' THEN c.[Dislikes] END ASC,
  CASE @OrderBy WHEN 'REPORTS DESC' THEN c.[Reports] END DESC,
  CASE @OrderBy WHEN 'REPORTS' THEN c.[Reports] END ASC,
  CASE @OrderBy WHEN 'REPORTS ASC' THEN c.[Reports] END ASC
) AS RowNum
  FROM {databaseOwner}{objectQualifier}vw_Blog_Comments c
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID=c.ContentItemId
   INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts p ON p.ContentItemId=c.ContentItemId
   INNER JOIN @Blogs b ON b.BlogID = p.BlogID
  WHERE ci.ModuleID=@ModuleId AND (b.CanViewComment>0 OR b.[Owner]=@UserID)) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM {databaseOwner}{objectQualifier}vw_Blog_Comments c
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID=c.ContentItemId
WHERE ci.ModuleID=@ModuleId;
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPost') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPost
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPost
 @ContentItemId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 p.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=p.ContentItemId AND c.Approved=1) AS NrComments
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@Locale) p
WHERE
 p.[ContentItemId] = @ContentItemId
 AND p.ModuleId = @ModuleId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPostByLegacyEntryId') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostByLegacyEntryId
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostByLegacyEntryId
 @EntryId INT,
 @PortalId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 p.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=p.ContentItemId AND c.Approved=1) AS NrComments
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@Locale) p
  INNER JOIN {databaseOwner}{objectQualifier}Blog_LegacyUrls lu ON lu.ContentItemId=p.ContentItemId
  INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=p.ModuleID
WHERE
 m.PortalID=@PortalId
 AND lu.EntryId=@EntryId
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPostByLegacyUrl') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostByLegacyUrl
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostByLegacyUrl
 @Url NVARCHAR(300),
 @PortalId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 p.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=p.ContentItemId AND c.Approved=1) AS NrComments
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@Locale) p
  INNER JOIN {databaseOwner}{objectQualifier}Blog_LegacyUrls lu ON lu.ContentItemId=p.ContentItemId
  INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=p.ModuleID
WHERE
 m.PortalID=@PortalId
 AND lu.Url=@Url
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPostLocalizations') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostLocalizations
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostLocalizations
 @ContentItemId INT
AS
SELECT
 pl.*,
 lci.Content
FROM
 {databaseOwner}{objectQualifier}Blog_PostLocalization pl
  LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems lci ON pl.LocalizedContentItemId=lci.ContentItemID
WHERE
 pl.[ContentItemId] = @ContentItemId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPosts') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPosts
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPosts
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @OnlyActionable BIT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT,
 [Owner] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege],
 b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
WHERE b.ModuleID=@ModuleId;
SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 AND (@OnlyActionable=0 OR (p.CreatedByUserID=@UserId OR b.HasPrivilege>0 OR b.[Owner]=@UserId OR @UserIsAdmin=1))
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 AND (@OnlyActionable=0 OR (p.CreatedByUserID=@UserId OR b.HasPrivilege>0 OR b.[Owner]=@UserId OR @UserIsAdmin=1))
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPostsByBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostsByBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostsByBlog
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
SELECT 
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetPostsByTerm') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostsByTerm
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetPostsByTerm
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @TermID INT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT,
 [Owner] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege],
 b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
WHERE b.ModuleID=@ModuleId;
SELECT 
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTerm') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTerm
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTerm
 @TermId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 t.*,
 (SELECT COUNT(*) FROM
  {databaseOwner}{objectQualifier}ContentItems_Tags tags
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 {databaseOwner}{objectQualifier}Blog_TermList(@Locale) t
WHERE
 t.TermID=@TermId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermLocalizations') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermLocalizations
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermLocalizations
 @TermId INT
AS
SELECT
 tl.*
FROM
 {databaseOwner}{objectQualifier}Blog_TermLocalization tl
WHERE
 tl.TermID=@TermId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByModule') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByModule
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByModule
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS
SELECT * FROM
(SELECT
 t.*,
 (SELECT COUNT(*) FROM
  {databaseOwner}{objectQualifier}ContentItems_Tags tags
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 {databaseOwner}{objectQualifier}Blog_TermList(@Locale) t) AllTerms
WHERE
 AllTerms.TotalPosts>0
ORDER BY AllTerms.ViewOrder, AllTerms.Name
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByPost') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByPost
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByPost
 @ContentItemId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 t.*,
 (SELECT COUNT(*) FROM
  {databaseOwner}{objectQualifier}ContentItems_Tags tags
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts entries ON entries.ContentItemId=tags.ContentItemID
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs blogs ON entries.BlogID=blogs.BlogID
  WHERE entries.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 {databaseOwner}{objectQualifier}ContentItems_Tags tag
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts p ON p.ContentItemId=tag.ContentItemID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON p.BlogID=b.BlogID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_TermList(@Locale) t ON tag.TermID=t.TermID
WHERE
 tag.ContentItemID = @ContentItemId
 AND b.ModuleId = @ModuleId
ORDER BY t.ViewOrder, t.Name
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetTermsByVocabulary') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByVocabulary
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetTermsByVocabulary
 @ModuleId INT,
 @VocabularyId INT,
 @Locale NVARCHAR(10)
AS
SELECT
 t.*,
 (SELECT COUNT(*) FROM
  {databaseOwner}{objectQualifier}ContentItems_Tags tags
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 {databaseOwner}{objectQualifier}Blog_TermList(@Locale) t
WHERE t.VocabularyID=@VocabularyId
ORDER BY t.ViewOrder, t.Name
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetUserPermissionsByModule') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetUserPermissionsByModule
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetUserPermissionsByModule
 @ModuleID INT,
 @UserId INT
AS
SELECT p.PermissionId, MAX(CAST(p.AllowAccess AS INT)) HasPermission
FROM
(SELECT bp.*
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 INNER JOIN {databaseOwner}{objectQualifier}Blog_Blogs b ON b.BlogID=bp.BlogId
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE
  b.ModuleID=@ModuleId
  AND bp.AllowAccess=1
  AND (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleID=-1)
 UNION
 SELECT
  1 AllowAccess, b2.BlogID, NULL, ps.n, -1, -1
 FROM {databaseOwner}{objectQualifier}Blog_Blogs b2
  INNER JOIN 
  {databaseOwner}{objectQualifier}Blog_Permissions (7) ps ON 1=1
 WHERE b2.OwnerUserId=@UserId
  AND b2.ModuleID=@ModuleID
 ) p
GROUP BY p.PermissionId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_GetUsersByBlogPermission') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_GetUsersByBlogPermission
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_GetUsersByBlogPermission
 @PortalId INT,
 @BlogId INT,
 @PermissionId INT
AS
SELECT DISTINCT * FROM
(SELECT
 u.*
FROM
 {databaseOwner}{objectQualifier}vw_Users u
 INNER JOIN {databaseOwner}{objectQualifier}UserRoles ur ON ur.UserID=u.UserID
 INNER JOIN {databaseOwner}{objectQualifier}Blog_BlogPermissions bp ON bp.RoleId=ur.RoleID AND bp.PermissionId=@PermissionId
WHERE
 (ISNULL(ur.EffectiveDate, DATEADD(day, - 1, GETDATE())) < GETDATE()) AND (ISNULL(ur.ExpiryDate, DATEADD(day, 1, GETDATE())) > GETDATE())
UNION
SELECT
 u.*
FROM
 {databaseOwner}{objectQualifier}vw_Users u
 INNER JOIN {databaseOwner}{objectQualifier}Blog_BlogPermissions bp ON bp.UserId=u.UserID AND bp.PermissionId=@PermissionId) x
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchPosts') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchPosts
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchPosts
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @SearchText NVARCHAR(1000),
 @SearchTitle BIT,
 @SearchContents BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT,
 [Owner] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege],
 b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
WHERE b.ModuleID=@ModuleId;
SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SearchPostsByTerm') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchPostsByTerm
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SearchPostsByTerm
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @TermID INT,
 @SearchText NVARCHAR(1000),
 @SearchTitle BIT,
 @SearchContents BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS
DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT,
 [Owner] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM {databaseOwner}{objectQualifier}Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM {databaseOwner}{objectQualifier}UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4) OR bp.RoleId=-1) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege],
 b.OwnerUserId
FROM {databaseOwner}{objectQualifier}Blog_Blogs b
WHERE b.ModuleID=@ModuleId;
SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM {databaseOwner}{objectQualifier}Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;
SELECT COUNT (*) AS TotalRecords
FROM
 {databaseOwner}{objectQualifier}Blog_PostList(@DisplayLocale) p
 INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate OR @EndDate IS NULL)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR p.CreatedByUserID=@UserId OR b.[Owner]=@UserId OR @UserIsAdmin=1)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SetBlogLocalization') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SetBlogLocalization
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SetBlogLocalization
 @BlogID INT,
 @Locale NVARCHAR(10),
 @Title NVARCHAR(255),
 @Description NVARCHAR(2000)
AS
IF @Title='' AND (@Description IS NULL OR @Description = '')
 DELETE FROM {databaseOwner}{objectQualifier}Blog_BlogLocalization
 WHERE BlogID = @BlogID AND [Locale] = @Locale
ELSE BEGIN
 IF EXISTS (SELECT BlogID FROM {databaseOwner}{objectQualifier}Blog_BlogLocalization WHERE BlogID = @BlogID AND [Locale] = @Locale)
  UPDATE {databaseOwner}{objectQualifier}Blog_BlogLocalization
   SET [Title] = @Title, [Description] = @Description
   WHERE BlogID = @BlogID AND [Locale] = @Locale
 ELSE
  INSERT INTO {databaseOwner}{objectQualifier}Blog_BlogLocalization
   (BlogID, [Locale], [Title], [Description])
   VALUES (@BlogID, @Locale, @Title, @Description)
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SetPostLocalization') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SetPostLocalization
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SetPostLocalization
 @PostID INT,
 @Locale NVARCHAR(10),
 @Title NVARCHAR(255),
 @Summary NVARCHAR(MAX),
 @Content NVARCHAR(MAX),
 @UpdatedByUser INT
AS
DECLARE @LocalizedContentItemId INT
SET @LocalizedContentItemId = NULL
IF @Content=''
 BEGIN
  IF EXISTS (SELECT ContentItemId FROM {databaseOwner}{objectQualifier}Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
   DELETE FROM {databaseOwner}{objectQualifier}ContentItems
   WHERE ContentItemID IN (SELECT LocalizedContentItemId FROM {databaseOwner}{objectQualifier}Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
 END
ELSE
 BEGIN 
  DECLARE @ContentTypeID INT
  SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM {databaseOwner}{objectQualifier}ContentItems WHERE ContentItemID=@PostID)
  DECLARE @ModuleId INT
  SET @ModuleId = (SELECT TOP 1 ModuleId FROM {databaseOwner}{objectQualifier}ContentItems WHERE ContentItemID=@PostID)
  IF EXISTS (SELECT ContentItemId FROM {databaseOwner}{objectQualifier}Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
   BEGIN
    SET @LocalizedContentItemId = (SELECT TOP 1 LocalizedContentItemId FROM {databaseOwner}{objectQualifier}Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
    EXEC {databaseOwner}{objectQualifier}UpdateContentItem @LocalizedContentItemId, @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser
   END
  ELSE
   BEGIN
    DECLARE @Tmp TABLE (ContentItemID INT)
    INSERT INTO @Tmp
    EXEC {databaseOwner}{objectQualifier}AddContentItem @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser;
    SET @LocalizedContentItemId = (SELECT TOP 1 ContentItemID FROM @Tmp)
   END
 END
IF @Title='' AND (@Summary IS NULL OR @Summary = '') AND (@Content IS NULL OR @Content = '')
 DELETE FROM {databaseOwner}{objectQualifier}Blog_PostLocalization
 WHERE ContentItemId = @PostID AND [Locale] = @Locale
ELSE
BEGIN
 IF EXISTS (SELECT ContentItemId FROM {databaseOwner}{objectQualifier}Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale)
  UPDATE {databaseOwner}{objectQualifier}Blog_PostLocalization
   SET [Title] = @Title, [Summary] = @Summary, [LocalizedContentItemId]=@LocalizedContentItemId
   WHERE ContentItemId = @PostID AND [Locale] = @Locale
 ELSE
  INSERT INTO {databaseOwner}{objectQualifier}Blog_PostLocalization
   (ContentItemId, [Locale], [Title], [Summary], [LocalizedContentItemId])
   VALUES (@PostID, @Locale, @Title, @Summary, @LocalizedContentItemId)
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SetTerm') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SetTerm
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SetTerm
 @TermID INT,
 @VocabularyID INT,
 @ParentTermID INT,
 @ViewOrder INT,
 @Name NVARCHAR(250),
 @Description NVARCHAR(2500),
 @CreatedByUserID INT
AS
IF @ParentTermID<1
SET @ParentTermID = NULL;
IF EXISTS (SELECT TermID FROM {databaseOwner}{objectQualifier}Taxonomy_Terms WHERE TermID = @TermID)
BEGIN
 IF ISNULL(@Description,'')=''
  SET @Description = (SELECT TOP 1 [Description] FROM {databaseOwner}{objectQualifier}Taxonomy_Terms WHERE TermID = @TermID);
 EXEC {databaseOwner}{objectQualifier}UpdateHeirarchicalTerm @TermID, @VocabularyID, @ParentTermID, @Name, @Description, 0, @CreatedByUserID;
END
ELSE
BEGIN
 DECLARE @ResultSet TABLE (NewTermID INT);
 INSERT INTO @ResultSet (NewTermID)
  EXEC {databaseOwner}{objectQualifier}AddHeirarchicalTerm @VocabularyID, @ParentTermID, @Name, @Description, 0, @CreatedByUserID;
 SET @TermID = (SELECT TOP 1 NewTermID FROM @ResultSet);
END
IF EXISTS (SELECT TermID FROM {databaseOwner}{objectQualifier}Blog_Terms WHERE TermID = @TermID)
BEGIN
 UPDATE {databaseOwner}{objectQualifier}Blog_Terms
 SET ViewOrder=@ViewOrder
 WHERE TermID=@TermID;
END
ELSE
BEGIN
 INSERT INTO {databaseOwner}{objectQualifier}Blog_Terms
  (TermID, ViewOrder)
 VALUES
  (@TermID, @ViewOrder);
END
SELECT @TermID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_SetTermLocalization') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_SetTermLocalization
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_SetTermLocalization
 @TermID INT,
 @Locale NVARCHAR(10),
 @Name NVARCHAR(250),
 @Description NVARCHAR(2500)
AS
IF @Name='' AND (@Description IS NULL OR @Description = '')
 DELETE FROM {databaseOwner}{objectQualifier}Blog_TermLocalization
 WHERE TermID = @TermID AND [Locale] = @Locale
ELSE BEGIN
 IF EXISTS (SELECT TermID FROM {databaseOwner}{objectQualifier}Blog_TermLocalization WHERE TermID = @TermID AND [Locale] = @Locale)
  UPDATE {databaseOwner}{objectQualifier}Blog_TermLocalization
   SET [Name] = @Name, [Description] = @Description
   WHERE TermID = @TermID AND [Locale] = @Locale
 ELSE
  INSERT INTO {databaseOwner}{objectQualifier}Blog_TermLocalization
   (TermID, [Locale], [Name], [Description])
   VALUES (@TermID, @Locale, @Name, @Description)
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateBlog') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateBlog
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateBlog
 @AutoApprovePingBack BIT, 
 @ModuleID INT, 
 @AutoApproveTrackBack BIT, 
 @BlogID INT, 
 @Copyright NVARCHAR (2000), 
 @Description NVARCHAR (2000), 
 @EnablePingBackReceive BIT, 
 @EnablePingBackSend BIT, 
 @EnableTrackBackReceive BIT, 
 @EnableTrackBackSend BIT, 
 @FullLocalization BIT, 
 @Image NVARCHAR (255), 
 @IncludeAuthorInFeed BIT, 
 @IncludeImagesInFeed BIT, 
 @Locale NVARCHAR (50), 
 @MustApproveGhostPosts BIT, 
 @OwnerUserId INT, 
 @PublishAsOwner BIT, 
 @Published BIT, 
 @Syndicated BIT, 
 @SyndicationEmail NVARCHAR (255), 
 @Title NVARCHAR (255), 
 @UpdatedByUser INT
AS
UPDATE {databaseOwner}{objectQualifier}Blog_Blogs SET
 [AutoApprovePingBack] = @AutoApprovePingBack,
 [ModuleID] = @ModuleID,
 [AutoApproveTrackBack] = @AutoApproveTrackBack,
 [Copyright] = @Copyright,
 [Description] = @Description,
 [EnablePingBackReceive] = @EnablePingBackReceive,
 [EnablePingBackSend] = @EnablePingBackSend,
 [EnableTrackBackReceive] = @EnableTrackBackReceive,
 [EnableTrackBackSend] = @EnableTrackBackSend,
 [FullLocalization] = @FullLocalization,
 [Image] = @Image,
 [IncludeAuthorInFeed] = @IncludeAuthorInFeed,
 [IncludeImagesInFeed] = @IncludeImagesInFeed,
 [LastModifiedByUserID] = @UpdatedByUser,
 [LastModifiedOnDate] = GETDATE(),
 [Locale] = @Locale,
 [MustApproveGhostPosts] = @MustApproveGhostPosts,
 [OwnerUserId] = @OwnerUserId,
 [PublishAsOwner] = @PublishAsOwner,
 [Published] = @Published,
 [Syndicated] = @Syndicated,
 [SyndicationEmail] = @SyndicationEmail,
 [Title] = @Title
WHERE
 [BlogID] = @BlogID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateComment') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateComment
 @Approved BIT, 
 @Author NVARCHAR (50), 
 @Comment NVARCHAR (MAX), 
 @CommentID INT, 
 @ContentItemId INT, 
 @Email NVARCHAR (255), 
 @ParentId INT, 
 @Website NVARCHAR (255), 
 @UpdatedByUser INT
AS
UPDATE {databaseOwner}{objectQualifier}Blog_Comments SET
 [Approved] = @Approved,
 [Author] = @Author,
 [Comment] = @Comment,
 [ContentItemId] = @ContentItemId,
 [Email] = @Email,
 [LastModifiedByUserID] = @UpdatedByUser,
 [LastModifiedOnDate] = GETDATE(),
 [ParentId] = @ParentId,
 [Website] = @Website
WHERE
 [CommentID] = @CommentID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdateModuleWiring') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateModuleWiring
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdateModuleWiring
 @PortalId INT,
 @OldModuleId INT,
 @NewModuleId INT
AS
UPDATE {databaseOwner}{objectQualifier}TabModuleSettings
SET SettingValue=CAST(@NewModuleId AS NVARCHAR(10))
FROM {databaseOwner}{objectQualifier}TabModuleSettings tms
 INNER JOIN {databaseOwner}{objectQualifier}TabModules tm ON tms.TabModuleID=tm.TabModuleID
 INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID=tm.ModuleID
WHERE tms.SettingName='BlogModuleId'
 AND m.PortalID=@PortalId
 AND tms.SettingValue=CAST(@OldModuleId AS NVARCHAR(10))
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Blog_UpdatePost') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdatePost
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Blog_UpdatePost
 @AllowComments BIT, 
 @BlogID INT, 
 @Content NVARCHAR(MAX),
 @ContentItemId INT, 
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Image NVARCHAR (255), 
 @Locale VARCHAR (10), 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX), 
 @TermIds NVARCHAR(1000),
 @Title NVARCHAR (255),
 @ViewCount INT,
 @UpdatedByUser INT
AS
DECLARE @ContentTypeID INT
SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM {databaseOwner}{objectQualifier}ContentTypes WHERE ContentType='DNN_Blog_Post')
DECLARE @ModuleId INT
SET @ModuleId = (SELECT TOP 1 ModuleId FROM {databaseOwner}{objectQualifier}Blog_Blogs WHERE BlogID=@BlogID)
EXEC {databaseOwner}{objectQualifier}UpdateContentItem @ContentItemId, @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser
UPDATE {databaseOwner}{objectQualifier}Blog_Posts SET
 [AllowComments] = @AllowComments,
 [BlogID] = @BlogID,
 [Copyright] = @Copyright,
 [DisplayCopyright] = @DisplayCopyright,
 [Image] = @Image,
 [Locale] = @Locale,
 [Published] = @Published,
 [PublishedOnDate] = @PublishedOnDate,
 [Summary] = @Summary,
 [Title] = @Title,
 [ViewCount]=@ViewCount
WHERE
 [ContentItemId] = @ContentItemId;
 
IF @TermIds<>''
BEGIN
 DECLARE @ids TABLE (s NVARCHAR(512))
 INSERT INTO @ids (s) SELECT s FROM {databaseOwner}{objectQualifier}Blog_Split(@TermIds,';');
 DELETE FROM {databaseOwner}{objectQualifier}ContentItems_Tags
 WHERE ContentItemID=@ContentItemId;
 INSERT INTO {databaseOwner}{objectQualifier}ContentItems_Tags ([ContentItemID], [TermID])
 SELECT @ContentItemID, CAST(i.s AS INT)
 FROM @ids i;
END
GO

